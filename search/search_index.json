{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the zec-qt-wallet Docs zec-qt-wallet is a z-Addr first, Sapling compatible wallet and full node for zcashd that runs on Linux, Windows and macOS. zec-qt-wallet is NOT an official wallet, and is not affiliated with the Zerocoin Electric Coin Company in any way.","title":"Home"},{"location":"#welcome-to-the-zec-qt-wallet-docs","text":"zec-qt-wallet is a z-Addr first, Sapling compatible wallet and full node for zcashd that runs on Linux, Windows and macOS. zec-qt-wallet is NOT an official wallet, and is not affiliated with the Zerocoin Electric Coin Company in any way.","title":"Welcome to the zec-qt-wallet Docs"},{"location":"android/","text":"Android Companion App The Android app is beta software Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet Zec QT Android is an Android frontend for zec-qt-wallet that lets you send and receive payments from your mobile phone. Participating in the beta ZecQT Android is currently in beta, and to participate in the beta program, you need to run zec-qt-wallet and install the APK on your Android phone. Head to the Releases page to download. Run the custom version of zec-qt-wallet In order to let your Android phone connect to your desktop, you need to run a special version of zec-qt-wallet. You can download it from the releases page and run the binary for your platform. Note that the regular version of zec-qt-wallet doesn t let you connect your Android phone. You can run your standard version of zcashd or let zec-qt-wallet run its embedded zcashd Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet After your node is synced, go to Apps - Connect Mobile App to view the connection QR Code Install the Android APK You ll need to allow Install from untrusted sources on your Android phone to install this APK. This is so that you can install the beta APK directly on your phone. (When this is publicly released, you ll be able to get it from the Google Play Store) After you download and install the APK, launch the program and scan the QR Code from your desktop to connect the two. Currently known limitations Both your phone and desktop need to be on the same network for the connection to work (i.e., It won t work over VPNs or over LTE/3G). Old-style Sprout addresses are not supported You can t select which address to send from . zec-qt-wallet will try to send Transactions from a Sapling address, given you have enough balance You can t generate new z-addrs or t-addrs from the phone. Wormhole service Issues or feature requests Please file send me all the feedback you can. You can file issues in the issues tab .","title":"Android Companion App"},{"location":"android/#android-companion-app","text":"The Android app is beta software Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet Zec QT Android is an Android frontend for zec-qt-wallet that lets you send and receive payments from your mobile phone.","title":"Android Companion App"},{"location":"android/#participating-in-the-beta","text":"ZecQT Android is currently in beta, and to participate in the beta program, you need to run zec-qt-wallet and install the APK on your Android phone. Head to the Releases page to download.","title":"Participating in the beta"},{"location":"android/#run-the-custom-version-of-zec-qt-wallet","text":"In order to let your Android phone connect to your desktop, you need to run a special version of zec-qt-wallet. You can download it from the releases page and run the binary for your platform. Note that the regular version of zec-qt-wallet doesn t let you connect your Android phone. You can run your standard version of zcashd or let zec-qt-wallet run its embedded zcashd Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet After your node is synced, go to Apps - Connect Mobile App to view the connection QR Code","title":"Run the custom version of zec-qt-wallet"},{"location":"android/#install-the-android-apk","text":"You ll need to allow Install from untrusted sources on your Android phone to install this APK. This is so that you can install the beta APK directly on your phone. (When this is publicly released, you ll be able to get it from the Google Play Store) After you download and install the APK, launch the program and scan the QR Code from your desktop to connect the two.","title":"Install the Android APK"},{"location":"android/#currently-known-limitations","text":"Both your phone and desktop need to be on the same network for the connection to work (i.e., It won t work over VPNs or over LTE/3G). Old-style Sprout addresses are not supported You can t select which address to send from . zec-qt-wallet will try to send Transactions from a Sapling address, given you have enough balance You can t generate new z-addrs or t-addrs from the phone.","title":"Currently known limitations"},{"location":"android/#wormhole-service","text":"","title":"Wormhole service"},{"location":"android/#issues-or-feature-requests","text":"Please file send me all the feedback you can. You can file issues in the issues tab .","title":"Issues or  feature requests"},{"location":"compile-from-source/","text":"Compiling from source Prerequisites To build zec-qt-wallet locally, you need to install Qt v5.11 or higher. You can get the latest opensource verison from the Qt download site . Download and install the qt version for your platform. During the installation, please also select the build version for your platform/compiler. zec-qt-wallet is written in C++ 14, so you ll also need a modern C++ compiler like g++/clang++/visual c++ depending on your platform. Building on Linux First install the pre-requisites sudo apt install libgl1-mesa-dev git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make -j$(nproc) ./zec-qt-wallet Building on Windows You need Visual Studio 2017 (The free C++ Community Edition works just fine). Alternately, you can cross-compile on Linux for Windows using the mingw compiler. See cross-compile instructions here . From the VS Tools command prompt git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -spec win32-msvc CONFIG+=debug nmake debug\\zec-qt-wallet.exe To create the Visual Studio project files so you can compile and run from Visual Studio: c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -tp vc CONFIG+=debug Building on Mac You need to install the XCode app or the XCode command line tools first, and then install Qt. git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make ./zec-qt-wallet.app/Contents/MacOS/zec-qt-wallet","title":"Compiling from source"},{"location":"compile-from-source/#compiling-from-source","text":"","title":"Compiling from source"},{"location":"compile-from-source/#prerequisites","text":"To build zec-qt-wallet locally, you need to install Qt v5.11 or higher. You can get the latest opensource verison from the Qt download site . Download and install the qt version for your platform. During the installation, please also select the build version for your platform/compiler. zec-qt-wallet is written in C++ 14, so you ll also need a modern C++ compiler like g++/clang++/visual c++ depending on your platform.","title":"Prerequisites"},{"location":"compile-from-source/#building-on-linux","text":"First install the pre-requisites sudo apt install libgl1-mesa-dev git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make -j$(nproc) ./zec-qt-wallet","title":"Building on Linux"},{"location":"compile-from-source/#building-on-windows","text":"You need Visual Studio 2017 (The free C++ Community Edition works just fine). Alternately, you can cross-compile on Linux for Windows using the mingw compiler. See cross-compile instructions here . From the VS Tools command prompt git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -spec win32-msvc CONFIG+=debug nmake debug\\zec-qt-wallet.exe To create the Visual Studio project files so you can compile and run from Visual Studio: c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -tp vc CONFIG+=debug","title":"Building on Windows"},{"location":"compile-from-source/#building-on-mac","text":"You need to install the XCode app or the XCode command line tools first, and then install Qt. git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make ./zec-qt-wallet.app/Contents/MacOS/zec-qt-wallet","title":"Building on Mac"},{"location":"faq/","text":"FAQ Installation Where do I download the software? zec-qt-wallet is available to download from the Zcash Foundation Github repository . The releases page lists the latest available downloads for each platform. Which installer should I download? See the installation section for more details for your platform. How do I verify the download file? All releases are signed and may be verified? Blockchain Is zec-qt-wallet a light client? No, zec-qt-wallet requires a full zcashd node to operate. A light client protocol is currently in development that would substantially reduce the storage and bandwidth requirements for a light wallet and once this development is complete How large is the blockchain? Currently the blockchain data directory is around 25GB (Feb, 2019) and will continue to grow with time. Can I move the data directory? If you are starting zec-qt-wallet for the first time then you can choose the advanced configuration and select the location of your data directory, which may for example be on a seperate disk. If you have an existing data directory you would like to move, you can achieve this through the following steps: Create the new directory Copy your existing data directory to the new location Update zcash.conf with the datadir=/your/new/path Restart zec-qt-wallet Can I move the params directory? Transactions Can I use funds with zero confirmations? Can I use a custom fee? Why does my change go a new address? How long does a Sapling transaction take? Can I have my change automatically shielded to a Sapling address? Can I remove shielded transactions sends from persisting in the wallet? Will zec-qt wallet remember my outgoing shielded sends? zcashd node Where is the default data directory on each platform? * Windows: `%HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf` * macOS: `~/Library/Application Support/Zcash/zcash.conf` * Linux: `~/.zcash/zcash.conf` Where is zcash.conf located? zcash.conf is located in the default data directory and will be in this location even if the datadir has been moved to a different location. Can I use zec-qt-wallet with a remote node? Does zec-qt-wallet work on testnet? Does zec-qt-wallet support selective disclosure? Does zec-qt-wallet support viewing keys? zcashd doesn\u2019t currently support Sapling viewing keys yet and will be implemented once supported. Wallet Is the wallet encrypted? How do I read a memo? Can I use zec-qt-wallet with a hardware wallet? Can I import a Sapling HD seed Can I remove an address from the wallet? Can I export a seed phrase? Can I mine with zec-qt-wallet? WinZEC How do I upgrade from WinZEC? Can I import WinZEC address book?","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#installation","text":"","title":"Installation"},{"location":"faq/#where-do-i-download-the-software","text":"zec-qt-wallet is available to download from the Zcash Foundation Github repository . The releases page lists the latest available downloads for each platform.","title":"Where do I download the software?"},{"location":"faq/#which-installer-should-i-download","text":"See the installation section for more details for your platform.","title":"Which installer should I download?"},{"location":"faq/#how-do-i-verify-the-download-file","text":"All releases are signed and may be verified?","title":"How do I verify the download file?"},{"location":"faq/#blockchain","text":"","title":"Blockchain"},{"location":"faq/#is-zec-qt-wallet-a-light-client","text":"No, zec-qt-wallet requires a full zcashd node to operate. A light client protocol is currently in development that would substantially reduce the storage and bandwidth requirements for a light wallet and once this development is complete","title":"Is zec-qt-wallet a light client?"},{"location":"faq/#how-large-is-the-blockchain","text":"Currently the blockchain data directory is around 25GB (Feb, 2019) and will continue to grow with time.","title":"How large is the blockchain?"},{"location":"faq/#can-i-move-the-data-directory","text":"If you are starting zec-qt-wallet for the first time then you can choose the advanced configuration and select the location of your data directory, which may for example be on a seperate disk. If you have an existing data directory you would like to move, you can achieve this through the following steps: Create the new directory Copy your existing data directory to the new location Update zcash.conf with the datadir=/your/new/path Restart zec-qt-wallet","title":"Can I move the data directory?"},{"location":"faq/#can-i-move-the-params-directory","text":"","title":"Can I move the params directory?"},{"location":"faq/#transactions","text":"","title":"Transactions"},{"location":"faq/#can-i-use-funds-with-zero-confirmations","text":"","title":"Can I use funds with zero confirmations?"},{"location":"faq/#can-i-use-a-custom-fee","text":"","title":"Can I use a custom fee?"},{"location":"faq/#why-does-my-change-go-a-new-address","text":"","title":"Why does my change go a new address?"},{"location":"faq/#how-long-does-a-sapling-transaction-take","text":"","title":"How long does a Sapling transaction take?"},{"location":"faq/#can-i-have-my-change-automatically-shielded-to-a-sapling-address","text":"","title":"Can I have my change automatically shielded to a Sapling address?"},{"location":"faq/#can-i-remove-shielded-transactions-sends-from-persisting-in-the-wallet","text":"","title":"Can I remove shielded transactions sends from persisting in the wallet?"},{"location":"faq/#will-zec-qt-wallet-remember-my-outgoing-shielded-sends","text":"","title":"Will zec-qt wallet remember my outgoing shielded sends?"},{"location":"faq/#zcashd-node","text":"","title":"zcashd node"},{"location":"faq/#where-is-the-default-data-directory-on-each-platform","text":"* Windows: `%HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf` * macOS: `~/Library/Application Support/Zcash/zcash.conf` * Linux: `~/.zcash/zcash.conf`","title":"Where is the default data directory on each platform?"},{"location":"faq/#where-is-zcashconf-located","text":"zcash.conf is located in the default data directory and will be in this location even if the datadir has been moved to a different location.","title":"Where is zcash.conf located?"},{"location":"faq/#can-i-use-zec-qt-wallet-with-a-remote-node","text":"","title":"Can I use zec-qt-wallet with a remote node?"},{"location":"faq/#does-zec-qt-wallet-work-on-testnet","text":"","title":"Does zec-qt-wallet work on testnet?"},{"location":"faq/#does-zec-qt-wallet-support-selective-disclosure","text":"","title":"Does zec-qt-wallet support selective disclosure?"},{"location":"faq/#does-zec-qt-wallet-support-viewing-keys","text":"zcashd doesn\u2019t currently support Sapling viewing keys yet and will be implemented once supported.","title":"Does zec-qt-wallet support viewing keys?"},{"location":"faq/#wallet","text":"","title":"Wallet"},{"location":"faq/#is-the-wallet-encrypted","text":"","title":"Is the wallet encrypted?"},{"location":"faq/#how-do-i-read-a-memo","text":"","title":"How do I read a memo?"},{"location":"faq/#can-i-use-zec-qt-wallet-with-a-hardware-wallet","text":"","title":"Can I use zec-qt-wallet with a hardware wallet?"},{"location":"faq/#can-i-import-a-sapling-hd-seed","text":"","title":"Can I import a Sapling HD seed"},{"location":"faq/#can-i-remove-an-address-from-the-wallet","text":"","title":"Can I remove an address from the wallet?"},{"location":"faq/#can-i-export-a-seed-phrase","text":"","title":"Can I export a seed phrase?"},{"location":"faq/#can-i-mine-with-zec-qt-wallet","text":"","title":"Can I mine with zec-qt-wallet?"},{"location":"faq/#winzec","text":"","title":"WinZEC"},{"location":"faq/#how-do-i-upgrade-from-winzec","text":"","title":"How do I upgrade from WinZEC?"},{"location":"faq/#can-i-import-winzec-address-book","text":"","title":"Can I import WinZEC address book?"},{"location":"installation/","text":"Installing zec-qt-wallet Download and Install zec-qt-wallet runs on Windows, macOS and Linux and is available to download from the releases page of the project Github repository. Follow the instructions below for the platform of your choice to install zec-qt-wallet. To compile from source see this section . Windows instructions (click to expand) Download and run the .msi installer (named Windows-installer-zec-qt-wallet-vx.x.x.msi) and follow the prompts. Alternately, you can download the release binary (named Windows-binaries-zec-qt-wallet-vx.x.x.zip), unzip it and double click on zec-qt-wallet to start. macOS instructions (click to expand) Download and double-click on the .dmg file to open it, and drag zec-qt-wallet on to the Applications link to install. You will need to give authorization for the program to run. Linux instructions (click to expand) If you are on Debian/Ubuntu, please download the .deb package and install it. sudo dpkg -i linux-deb-zec-qt-wallet-v0.5.9.deb sudo apt install -f Or you can download and run the binaries directly. tar -xvf zec-qt-wallet-v0.5.9.tar.gz ./zec-qt-wallet-v0.5.9/zec-qt-wallet zcashd zec-qt-wallet needs a Zcash node running zcashd . If you already have a zcashd node running, zec-qt-wallet will connect to it. If you don t have one running, zec-qt-wallet will start its embedded zcashd node. Additionally, if this is the first time you re running zec-qt-wallet or a zcashd daemon, zec-qt-wallet will download the zcash params (~1.7 GB) and configure zcash.conf for you. Disable embedded zcashd To force disabling the embedded zcashd and only connect to a remote node pass --no-embedded to the startup command. System requirements If using the embedded zcashd the recommended system requirements are 5GB of free RAM and 10GB of free disk (the size of the blockchain increases over time). Compiling from source zec-qt-wallet is written in C++ 14, and can be compiled with g++/clang++/visual c++. It also depends on Qt5, which you can get from here . Note that if you are compiling from source, you won t get the embedded zcashd by default. You can either run an external zcashd, or compile zcashd as well. See the instructions for setting up a build environment and detailed build instructions for each platform here . Upgrading It is important to keep your version of zec-qt-wallet up to date as new features are regularely added and bugs fixed. To download simply follow the instructions to install as your data directory and wallet will be untouched throughout. zcashd reaches end of service halt after 16 weeks If you are using the embedded zcashd then after 16 weeks from release zcashd will reach an end of service halt and will shutdown. Simply update your version of zec-qt-wallet to continue.","title":"Installing on Windows, Mac and Linux"},{"location":"installation/#installing-zec-qt-wallet","text":"","title":"Installing zec-qt-wallet"},{"location":"installation/#download-and-install","text":"zec-qt-wallet runs on Windows, macOS and Linux and is available to download from the releases page of the project Github repository. Follow the instructions below for the platform of your choice to install zec-qt-wallet. To compile from source see this section . Windows instructions (click to expand) Download and run the .msi installer (named Windows-installer-zec-qt-wallet-vx.x.x.msi) and follow the prompts. Alternately, you can download the release binary (named Windows-binaries-zec-qt-wallet-vx.x.x.zip), unzip it and double click on zec-qt-wallet to start. macOS instructions (click to expand) Download and double-click on the .dmg file to open it, and drag zec-qt-wallet on to the Applications link to install. You will need to give authorization for the program to run. Linux instructions (click to expand) If you are on Debian/Ubuntu, please download the .deb package and install it. sudo dpkg -i linux-deb-zec-qt-wallet-v0.5.9.deb sudo apt install -f Or you can download and run the binaries directly. tar -xvf zec-qt-wallet-v0.5.9.tar.gz ./zec-qt-wallet-v0.5.9/zec-qt-wallet","title":"Download and Install"},{"location":"installation/#zcashd","text":"zec-qt-wallet needs a Zcash node running zcashd . If you already have a zcashd node running, zec-qt-wallet will connect to it. If you don t have one running, zec-qt-wallet will start its embedded zcashd node. Additionally, if this is the first time you re running zec-qt-wallet or a zcashd daemon, zec-qt-wallet will download the zcash params (~1.7 GB) and configure zcash.conf for you. Disable embedded zcashd To force disabling the embedded zcashd and only connect to a remote node pass --no-embedded to the startup command.","title":"zcashd"},{"location":"installation/#system-requirements","text":"If using the embedded zcashd the recommended system requirements are 5GB of free RAM and 10GB of free disk (the size of the blockchain increases over time).","title":"System requirements"},{"location":"installation/#compiling-from-source","text":"zec-qt-wallet is written in C++ 14, and can be compiled with g++/clang++/visual c++. It also depends on Qt5, which you can get from here . Note that if you are compiling from source, you won t get the embedded zcashd by default. You can either run an external zcashd, or compile zcashd as well. See the instructions for setting up a build environment and detailed build instructions for each platform here .","title":"Compiling from source"},{"location":"installation/#upgrading","text":"It is important to keep your version of zec-qt-wallet up to date as new features are regularely added and bugs fixed. To download simply follow the instructions to install as your data directory and wallet will be untouched throughout. zcashd reaches end of service halt after 16 weeks If you are using the embedded zcashd then after 16 weeks from release zcashd will reach an end of service halt and will shutdown. Simply update your version of zec-qt-wallet to continue.","title":"Upgrading"},{"location":"setting-up-build-env/","text":"Setup a build environment Linux Pre-requisites It s best to set up a build environment on Ubuntu 16.04. It brings the right versions of libc and libstdc++ that ensures maximum compatibility. You can build on newer versions of Linux distros, but binaries compiled on these platforms may not work on older versions. # build dependencies sudo apt install clang g++ build-essential make mingw-w64 git pkg-config libc6-dev m4 g++-multilib autoconf libtool-bin ncurses-dev unzip python python-zmq zlib1g-dev wget curl bsdmainutils automake libgl1-mesa-dev libglu1-mesa-dev libfontconfig1-dev autopoint libssl-dev # MXE dependencies sudo apt install bash bison bzip2 flex gettext git gperf intltool libc6-dev-i386 libgdk-pixbuf2.0-dev libltdl-dev libtool-bin libxml-parser-perl make openssl p7zip-full patch perl pkg-config python ruby sed unzip wget xz-utils Compile OpenSSL You need to compile a static version of OpenSSL, which is passed to the Qt5 configuration script # Download openssl 1.0.2 ./Configure linux-x86_64 make Static build of Qt5 Download Qt5 Sources mkdir -p ~/Qt/5.11.2 cd ~/Qt/5.11.2 wget https://download.qt.io/archive/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xz tar xvf qt-everywhere-src-5.11.2.tar.xz cd qt-everywhere-src-5.11.2 Configure and build Qt5 statically OPENSSL_LIBS='-L/path/to/openssl-1.0.2q -lssl -lcrypto' ./configure -static -prefix ~/Qt/5.11.2/static -skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin -nomake examples -nomake tests -qt-zlib -qt-libpng -qt-xcb -qt-xkbcommon -feature-fontconfig -no-feature-getentropy -release -openssl-linked -opensource make -j$(nproc) make -j$(nproc) install Build MXE (Cross-compiled Qt5 for Windows in Linux) mkdir ~/github cd ~/github git clone https://github.com/mxe/mxe.git cd mxe make -j$(nproc) MXE_TARGETS=x86_64-w64-mingw32.static qtbase qtwebsockets Build zec-qt-wallet git clone git@github.com:adityapk00/zec-qt-wallet.git ~/Qt/5.11.2/static/bin/qmake zec-qt-wallet.pro CONFIG+=debug-spec linux-clang make -j$(nproc) Compiling zcashd for embedded zcashd git clone git@github.com:adityapk00/zcash zcash-linux git clone git@github.com:adityapk00/zcash zcash-win mkdir -p ~/zcash/artifacts # Built zcashd goes here. Note that we create two separate folders, because we re going to compile zcashd for windows and linux. Build zcashd windows cd zcash-win ./mkreleasewin.sh Build zcashd linux cd zcash-linux ./mkreleaselinux.sh Setup Environment Add the following paths to your ~/.bashrc . Remember to add it at the very top, before the interactivity check, because we need these variables even in an ssh shell. export QT_STATIC=~/Qt/5.11.2/static/ export MXE_PATH=~/github/mxe/usr/bin/ export ZCASH_DIR=~/github/zcash Make release build PREV_VERSION=0.2.5 APP_VERSION=0.2.6 src/scripts/mkrelease.sh This will put all the windows and linux compiled binaries into the artifacts folder macOS Install Xcode or Xcode Command Line Tools, and then install Qt 5.11 From a terminal: cd ~/github/zec-qt-wallet/ APP_VERSION=0.3.0 src/scripts/mkmacdmg.sh This will build the app and package it into a dmg and place it in the artifacts/ folder Building zcashd git clone git@github.com:adityapk00/zcash cd zcash ./zcutil/build.sh -j$(nproc) mkdir artifacts/ cp src/zcashd artifacts/ cp src/zcash-cli artifacts/ Windows Even though zec-qt-wallet for Windows is cross-compiled on Linux, we still need a windows machine to build the installer. The windows installer is built using WiX toolset. Install WiX toolset 3.11.1 from here . After installation, please add the directory to the system path (both candle.exe and light.exe are runnable) To build the installer, in Powershell, run APP_VERSION=0.3.0 src/scripts/mkwininstaller.ps1 Running the unified build After all these 3 machines have been setup, we can build all the release artifacts (windows, linux, macOS binaries and installers) with one command, triggered from the Windows machine. (Replace u1604 and macmini with names of the linux and macOS machines respectively) cd ~/github/zec-qt-wallet .\\src\\scripts\\dobuild.ps1 -version 0.4.1 -prev 0.4.0 -server u1604 -macserver macmini This will build all 3 platforms and their installers, and place everything in the artifacts folder on the windows machine.","title":"Setting up a build environment"},{"location":"setting-up-build-env/#setup-a-build-environment","text":"","title":"Setup a build environment"},{"location":"setting-up-build-env/#linux","text":"","title":"Linux"},{"location":"setting-up-build-env/#pre-requisites","text":"It s best to set up a build environment on Ubuntu 16.04. It brings the right versions of libc and libstdc++ that ensures maximum compatibility. You can build on newer versions of Linux distros, but binaries compiled on these platforms may not work on older versions. # build dependencies sudo apt install clang g++ build-essential make mingw-w64 git pkg-config libc6-dev m4 g++-multilib autoconf libtool-bin ncurses-dev unzip python python-zmq zlib1g-dev wget curl bsdmainutils automake libgl1-mesa-dev libglu1-mesa-dev libfontconfig1-dev autopoint libssl-dev # MXE dependencies sudo apt install bash bison bzip2 flex gettext git gperf intltool libc6-dev-i386 libgdk-pixbuf2.0-dev libltdl-dev libtool-bin libxml-parser-perl make openssl p7zip-full patch perl pkg-config python ruby sed unzip wget xz-utils","title":"Pre-requisites"},{"location":"setting-up-build-env/#compile-openssl","text":"You need to compile a static version of OpenSSL, which is passed to the Qt5 configuration script # Download openssl 1.0.2 ./Configure linux-x86_64 make","title":"Compile OpenSSL"},{"location":"setting-up-build-env/#static-build-of-qt5","text":"Download Qt5 Sources mkdir -p ~/Qt/5.11.2 cd ~/Qt/5.11.2 wget https://download.qt.io/archive/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xz tar xvf qt-everywhere-src-5.11.2.tar.xz cd qt-everywhere-src-5.11.2 Configure and build Qt5 statically OPENSSL_LIBS='-L/path/to/openssl-1.0.2q -lssl -lcrypto' ./configure -static -prefix ~/Qt/5.11.2/static -skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin -nomake examples -nomake tests -qt-zlib -qt-libpng -qt-xcb -qt-xkbcommon -feature-fontconfig -no-feature-getentropy -release -openssl-linked -opensource make -j$(nproc) make -j$(nproc) install","title":"Static build of Qt5"},{"location":"setting-up-build-env/#build-mxe-cross-compiled-qt5-for-windows-in-linux","text":"mkdir ~/github cd ~/github git clone https://github.com/mxe/mxe.git cd mxe make -j$(nproc) MXE_TARGETS=x86_64-w64-mingw32.static qtbase qtwebsockets","title":"Build MXE (Cross-compiled Qt5 for Windows in Linux)"},{"location":"setting-up-build-env/#build-zec-qt-wallet","text":"git clone git@github.com:adityapk00/zec-qt-wallet.git ~/Qt/5.11.2/static/bin/qmake zec-qt-wallet.pro CONFIG+=debug-spec linux-clang make -j$(nproc)","title":"Build zec-qt-wallet"},{"location":"setting-up-build-env/#compiling-zcashd-for-embedded-zcashd","text":"git clone git@github.com:adityapk00/zcash zcash-linux git clone git@github.com:adityapk00/zcash zcash-win mkdir -p ~/zcash/artifacts # Built zcashd goes here. Note that we create two separate folders, because we re going to compile zcashd for windows and linux. Build zcashd windows cd zcash-win ./mkreleasewin.sh Build zcashd linux cd zcash-linux ./mkreleaselinux.sh","title":"Compiling zcashd for embedded zcashd"},{"location":"setting-up-build-env/#setup-environment","text":"Add the following paths to your ~/.bashrc . Remember to add it at the very top, before the interactivity check, because we need these variables even in an ssh shell. export QT_STATIC=~/Qt/5.11.2/static/ export MXE_PATH=~/github/mxe/usr/bin/ export ZCASH_DIR=~/github/zcash","title":"Setup Environment"},{"location":"setting-up-build-env/#make-release-build","text":"PREV_VERSION=0.2.5 APP_VERSION=0.2.6 src/scripts/mkrelease.sh This will put all the windows and linux compiled binaries into the artifacts folder","title":"Make release build"},{"location":"setting-up-build-env/#macos","text":"Install Xcode or Xcode Command Line Tools, and then install Qt 5.11 From a terminal: cd ~/github/zec-qt-wallet/ APP_VERSION=0.3.0 src/scripts/mkmacdmg.sh This will build the app and package it into a dmg and place it in the artifacts/ folder","title":"macOS"},{"location":"setting-up-build-env/#building-zcashd","text":"git clone git@github.com:adityapk00/zcash cd zcash ./zcutil/build.sh -j$(nproc) mkdir artifacts/ cp src/zcashd artifacts/ cp src/zcash-cli artifacts/","title":"Building zcashd"},{"location":"setting-up-build-env/#windows","text":"Even though zec-qt-wallet for Windows is cross-compiled on Linux, we still need a windows machine to build the installer. The windows installer is built using WiX toolset. Install WiX toolset 3.11.1 from here . After installation, please add the directory to the system path (both candle.exe and light.exe are runnable) To build the installer, in Powershell, run APP_VERSION=0.3.0 src/scripts/mkwininstaller.ps1","title":"Windows"},{"location":"setting-up-build-env/#running-the-unified-build","text":"After all these 3 machines have been setup, we can build all the release artifacts (windows, linux, macOS binaries and installers) with one command, triggered from the Windows machine. (Replace u1604 and macmini with names of the linux and macOS machines respectively) cd ~/github/zec-qt-wallet .\\src\\scripts\\dobuild.ps1 -version 0.4.1 -prev 0.4.0 -server u1604 -macserver macmini This will build all 3 platforms and their installers, and place everything in the artifacts folder on the windows machine.","title":"Running the unified build"},{"location":"translations/","text":"Translating zec-qt-wallet To help with translations, first clone/fork the zec-qt-wallet repository . In the res/ folder, you will find a number of *.ts files which contain the translations. If you don t find your language listed, please copy the zec-qt-wallet_template.ts file and use that. You can open the *.ts file (which is an XML file) and enter the translated strings manually using your favorite text editor, and enter the translations in the translation XML tag. It might be more productive to use the Qt Linguist tool, which provides a nice UI that has additional context and easily manages the strings for translations. Installing and using Qt Linguist You can install the Qt open source distribution from here , and that comes with Qt Linguist. You can launch it by launching /path/to/Qt5/bin/linguist res/zec_qt_wallet_ language code .ts . Windows and Mac builds for standalone Qt Linguist are available here Submitting translations Once you have updated the translations in the *.ts file, please create a pull request for the file. Please remember to confirm the translations from the Linguist menu (or remove the unfinished tag from XML element, if you are editing manually). Note that you don t have to translate all the strings. You can do this incrementally, and zec-qt-wallet will use all available translated strings, else fall back to English. Testing translations If you want to test the translations locally, you ll have to compile zec-qt-wallet. Please see compiling from source instructions. Save the linguist file, and then, from a command prompt (remember to replace ln with your language code): # Compile the translations /path/to/qt5/bin/lrelease res/zec_qt_wallet_ ln .ts # Add to the Qt5's base translations /path/to/qt5/bin/lconvert -o res/zec_ ln .qm res/zec_qt_wallet_ ln .qm /path/to/qt5/translations/qtbase_ ln .qm # Copy to the res folder mv res/zec_ ln .qm res/zec_qt_wallet_ ln .qm After this, you can launch your compiled zec-qt-wallet with a LANG environment variable to force zec-qt-wallet to use that language LANG=es ./zec-qt-wallet","title":"Translating zec-qt-wallet"},{"location":"translations/#translating-zec-qt-wallet","text":"To help with translations, first clone/fork the zec-qt-wallet repository . In the res/ folder, you will find a number of *.ts files which contain the translations. If you don t find your language listed, please copy the zec-qt-wallet_template.ts file and use that. You can open the *.ts file (which is an XML file) and enter the translated strings manually using your favorite text editor, and enter the translations in the translation XML tag. It might be more productive to use the Qt Linguist tool, which provides a nice UI that has additional context and easily manages the strings for translations.","title":"Translating zec-qt-wallet"},{"location":"translations/#installing-and-using-qt-linguist","text":"You can install the Qt open source distribution from here , and that comes with Qt Linguist. You can launch it by launching /path/to/Qt5/bin/linguist res/zec_qt_wallet_ language code .ts . Windows and Mac builds for standalone Qt Linguist are available here","title":"Installing and using Qt Linguist"},{"location":"translations/#submitting-translations","text":"Once you have updated the translations in the *.ts file, please create a pull request for the file. Please remember to confirm the translations from the Linguist menu (or remove the unfinished tag from XML element, if you are editing manually). Note that you don t have to translate all the strings. You can do this incrementally, and zec-qt-wallet will use all available translated strings, else fall back to English.","title":"Submitting translations"},{"location":"translations/#testing-translations","text":"If you want to test the translations locally, you ll have to compile zec-qt-wallet. Please see compiling from source instructions. Save the linguist file, and then, from a command prompt (remember to replace ln with your language code): # Compile the translations /path/to/qt5/bin/lrelease res/zec_qt_wallet_ ln .ts # Add to the Qt5's base translations /path/to/qt5/bin/lconvert -o res/zec_ ln .qm res/zec_qt_wallet_ ln .qm /path/to/qt5/translations/qtbase_ ln .qm # Copy to the res folder mv res/zec_ ln .qm res/zec_qt_wallet_ ln .qm After this, you can launch your compiled zec-qt-wallet with a LANG environment variable to force zec-qt-wallet to use that language LANG=es ./zec-qt-wallet","title":"Testing translations"},{"location":"troubleshooting/","text":"Troubleshooting The zcashd debug log The debug.log file is the first place to start for diagnosing issues. My node isn t syncing My transaction didn t get mined How to perform a wallet rescan How to perform a reindex The displayed balance is incorrect zcashd has no connections Some of my shielded transactions are not displayed in the transaction tab I can t generate a new Sprout address Sending from a Sprout address to a Sapling one results in error Common error messages Could not start embedded zcashd This means zec-qt-wallet couldn t start its embedded zcashd for some reason. zec-qt-wallet will show you another dialog box with the error reported from zcashd for debugging purposes as well. You might be able to solve this by simply restarting zec-qt-wallet, but if you repeatedly see this error, it might be one of the following reasons: If you compiled zec-qt-wallet yourself and are running it: zcashd doesn t come with the github repository, so you ll have to compile zcashd separately and copy if over into your zec-qt-wallet directory. You might have corrupt zcash params: In this case, you may try deleting your params and letting zec-qt-wallet download them again. If all else fails, you can run an external zcashd and zec-qt-wallet will connect to it. Authentication error Normally, zec-qt-wallet can pick up the rpcuser/rpcpassword from zcash.conf. If it doesn t for some reason, you can set the username/password in the File- Settings menu. If you are connecting to a remote node, make sure that zcashd on the remote machine is accepting connections from your machine. The target machine s firewall needs to allow connections from your host and also zcashd is set to be configured to accept connections from this host. Not enough balance when sending transactions The most likely cause for this is that you are trying to spend unconfirmed funds. Unlike Bitcoin, the Zcash protocol doesn t let you spent unconfirmed funds yet. Please wait for 1-2 blocks for the funds to confirm and retry the transaction. My issue isn t resolved Open an issue on Github or tweet at @zecqtwallet for help.","title":"Troubleshooting Issues"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#the-zcashd-debug-log","text":"The debug.log file is the first place to start for diagnosing issues.","title":"The zcashd debug log"},{"location":"troubleshooting/#my-node-isnt-syncing","text":"","title":"My node isn't syncing"},{"location":"troubleshooting/#my-transaction-didnt-get-mined","text":"","title":"My transaction didn't get mined"},{"location":"troubleshooting/#how-to-perform-a-wallet-rescan","text":"","title":"How to perform a wallet rescan"},{"location":"troubleshooting/#how-to-perform-a-reindex","text":"","title":"How to perform a reindex"},{"location":"troubleshooting/#the-displayed-balance-is-incorrect","text":"","title":"The displayed balance is incorrect"},{"location":"troubleshooting/#zcashd-has-no-connections","text":"","title":"zcashd has no connections"},{"location":"troubleshooting/#some-of-my-shielded-transactions-are-not-displayed-in-the-transaction-tab","text":"","title":"Some of my shielded transactions are not displayed in the transaction tab"},{"location":"troubleshooting/#i-cant-generate-a-new-sprout-address","text":"","title":"I can't generate a new Sprout address"},{"location":"troubleshooting/#sending-from-a-sprout-address-to-a-sapling-one-results-in-error","text":"","title":"Sending from a Sprout address to a Sapling one results in error"},{"location":"troubleshooting/#common-error-messages","text":"","title":"Common error messages"},{"location":"troubleshooting/#could-not-start-embedded-zcashd","text":"This means zec-qt-wallet couldn t start its embedded zcashd for some reason. zec-qt-wallet will show you another dialog box with the error reported from zcashd for debugging purposes as well. You might be able to solve this by simply restarting zec-qt-wallet, but if you repeatedly see this error, it might be one of the following reasons: If you compiled zec-qt-wallet yourself and are running it: zcashd doesn t come with the github repository, so you ll have to compile zcashd separately and copy if over into your zec-qt-wallet directory. You might have corrupt zcash params: In this case, you may try deleting your params and letting zec-qt-wallet download them again. If all else fails, you can run an external zcashd and zec-qt-wallet will connect to it.","title":"Could not start embedded zcashd"},{"location":"troubleshooting/#authentication-error","text":"Normally, zec-qt-wallet can pick up the rpcuser/rpcpassword from zcash.conf. If it doesn t for some reason, you can set the username/password in the File- Settings menu. If you are connecting to a remote node, make sure that zcashd on the remote machine is accepting connections from your machine. The target machine s firewall needs to allow connections from your host and also zcashd is set to be configured to accept connections from this host.","title":"Authentication error"},{"location":"troubleshooting/#not-enough-balance-when-sending-transactions","text":"The most likely cause for this is that you are trying to spend unconfirmed funds. Unlike Bitcoin, the Zcash protocol doesn t let you spent unconfirmed funds yet. Please wait for 1-2 blocks for the funds to confirm and retry the transaction.","title":"Not enough balance when sending transactions"},{"location":"troubleshooting/#my-issue-isnt-resolved","text":"Open an issue on Github or tweet at @zecqtwallet for help.","title":"My issue isn't resolved"},{"location":"turnstile-migration/","text":"Turnstile Migration This is not an official implementation of the turnstile zcashd has yet to implement support for the Sapling turnstile. There is an official proposal which has yet to be implemented into zcashd . You can follow progress of development here and the zec-qt-wallet is an individual implementation. If you are concerned then wait until the official RPC tool is released. Turnstile Migration overview The Sapling turnstile is an auditing mechanism for the number of ZEC in circulation. The Sapling turnstile provides accounting for the ZEC held in Sprout shielded addresses as they are migrated to Sapling shielded addresses. To achieve this, owners of shielded ZEC are required to send their balances to a transparent address before sending to Sapling shielded addresses. If you simply send the funds from a Sprout address to a transparent address to a Sapling address it would be relitavely trivial to link the balances. The [zcash docs] detail the best practises for handling this turnstile migration. zec-qt-wallet includes a tool to make this simple to migrate your shielded coins from the Sprout to Sapling sheilded pool. It is recommended that all users perform this migration. zec-qt-wallet can migrate your Sprout funds to a Sapling address in a privacy preserving manner folling the [privacy recommendations] by: Creating new transparent addresses in your wallet to move from Sprout to the transparent addressess Splits the funds across multiple transaparent addresses over multiple blocks Uses rouund numbers to obscure any identifying information as these round number values e.g. 10 will be very common in the blockchain Using the turnstile tool You do not need to keep the wallet open during the migration If you shut down the wallet then it ll send on reopening. You will need the wallet to be open in order for any transactions to be sent. Steps","title":"Turnstile Migration"},{"location":"turnstile-migration/#turnstile-migration","text":"This is not an official implementation of the turnstile zcashd has yet to implement support for the Sapling turnstile. There is an official proposal which has yet to be implemented into zcashd . You can follow progress of development here and the zec-qt-wallet is an individual implementation. If you are concerned then wait until the official RPC tool is released.","title":"Turnstile Migration"},{"location":"turnstile-migration/#turnstile-migration-overview","text":"The Sapling turnstile is an auditing mechanism for the number of ZEC in circulation. The Sapling turnstile provides accounting for the ZEC held in Sprout shielded addresses as they are migrated to Sapling shielded addresses. To achieve this, owners of shielded ZEC are required to send their balances to a transparent address before sending to Sapling shielded addresses. If you simply send the funds from a Sprout address to a transparent address to a Sapling address it would be relitavely trivial to link the balances. The [zcash docs] detail the best practises for handling this turnstile migration. zec-qt-wallet includes a tool to make this simple to migrate your shielded coins from the Sprout to Sapling sheilded pool. It is recommended that all users perform this migration. zec-qt-wallet can migrate your Sprout funds to a Sapling address in a privacy preserving manner folling the [privacy recommendations] by: Creating new transparent addresses in your wallet to move from Sprout to the transparent addressess Splits the funds across multiple transaparent addresses over multiple blocks Uses rouund numbers to obscure any identifying information as these round number values e.g. 10 will be very common in the blockchain","title":"Turnstile Migration overview"},{"location":"turnstile-migration/#using-the-turnstile-tool","text":"You do not need to keep the wallet open during the migration If you shut down the wallet then it ll send on reopening. You will need the wallet to be open in order for any transactions to be sent. Steps","title":"Using the turnstile tool"},{"location":"using-zec-qt-wallet/","text":"Using Zec-QT-Wallet Info The first time zec-qt-wallet starts it will create a zcash.conf file with default values as well as downloading the parameters required for sending and validating transactions. These parameters are currently around 1.7GB in size and only need to be downloaded once. Getting started Now that you have zec-qt-wallet installed it is time to start using the software. If you are using the embedded zcashd and it is your first time using the software, the system parameters will be downloaded from the internet (~1.7GB) and a zcash.conf file created specifying some default configuration values. The blockchain will then begin to sync, which is a time consuming process taking anywhere of the order of 8 hours to days depending on your hardware and network performance. You can monitor the progress in the bottom left corner which displays the sync percentage. Initial Sync The blockchain is around xxx GB in size and will take around 8+ hours to download. Monitor the progress via the sync progress in the bottom right corner of zec-qt-wallet. Generating a new address Visting the Receive tab will show all current addresses and enable you to generate new ones. To learn about the different types of addresses transparent, shielded (Sprout and Sapling) please visit this page . It is not possible to remove an address from the wallet. Whenever a new address is generated care should be taken to ensure that a backup of the wallet is taken. The QR code may be scanned by a compatible device. Sending a transaction Show fields used to send Viewing transaction on explorer Once complete, the txid will be displayed. Right click to bring up a menu to view on the block explorer. Alternitavely for any transactions on the Transactions tab right click and choose View on block explorer . Pay Zcash URI How to use Address book Backing up Export a single private key Export all private keys Backing up wallet.dat Importing private keys zeq-qt-wallet options Remember shielded transactions Allow custom fees Shield change automatically to Sapling address Connect via TOR Encrypted Memo field Including a reply address Replying to a memo Exporting transactions Apps Using z-board.net Turnstile migration Customising zcash.conf Connecting to an external zcashd","title":"Using zec-qt-wallet"},{"location":"using-zec-qt-wallet/#using-zec-qt-wallet","text":"Info The first time zec-qt-wallet starts it will create a zcash.conf file with default values as well as downloading the parameters required for sending and validating transactions. These parameters are currently around 1.7GB in size and only need to be downloaded once.","title":"Using Zec-QT-Wallet"},{"location":"using-zec-qt-wallet/#getting-started","text":"Now that you have zec-qt-wallet installed it is time to start using the software. If you are using the embedded zcashd and it is your first time using the software, the system parameters will be downloaded from the internet (~1.7GB) and a zcash.conf file created specifying some default configuration values. The blockchain will then begin to sync, which is a time consuming process taking anywhere of the order of 8 hours to days depending on your hardware and network performance. You can monitor the progress in the bottom left corner which displays the sync percentage. Initial Sync The blockchain is around xxx GB in size and will take around 8+ hours to download. Monitor the progress via the sync progress in the bottom right corner of zec-qt-wallet.","title":"Getting started"},{"location":"using-zec-qt-wallet/#generating-a-new-address","text":"Visting the Receive tab will show all current addresses and enable you to generate new ones. To learn about the different types of addresses transparent, shielded (Sprout and Sapling) please visit this page . It is not possible to remove an address from the wallet. Whenever a new address is generated care should be taken to ensure that a backup of the wallet is taken. The QR code may be scanned by a compatible device.","title":"Generating a new address"},{"location":"using-zec-qt-wallet/#sending-a-transaction","text":"Show fields used to send","title":"Sending a transaction"},{"location":"using-zec-qt-wallet/#viewing-transaction-on-explorer","text":"Once complete, the txid will be displayed. Right click to bring up a menu to view on the block explorer. Alternitavely for any transactions on the Transactions tab right click and choose View on block explorer .","title":"Viewing transaction on explorer"},{"location":"using-zec-qt-wallet/#pay-zcash-uri","text":"How to use","title":"Pay Zcash URI"},{"location":"using-zec-qt-wallet/#address-book","text":"","title":"Address book"},{"location":"using-zec-qt-wallet/#backing-up","text":"","title":"Backing up"},{"location":"using-zec-qt-wallet/#export-a-single-private-key","text":"","title":"Export a single private key"},{"location":"using-zec-qt-wallet/#export-all-private-keys","text":"","title":"Export all private keys"},{"location":"using-zec-qt-wallet/#backing-up-walletdat","text":"","title":"Backing up wallet.dat"},{"location":"using-zec-qt-wallet/#importing-private-keys","text":"","title":"Importing private keys"},{"location":"using-zec-qt-wallet/#zeq-qt-wallet-options","text":"","title":"zeq-qt-wallet options"},{"location":"using-zec-qt-wallet/#remember-shielded-transactions","text":"","title":"Remember shielded transactions"},{"location":"using-zec-qt-wallet/#allow-custom-fees","text":"","title":"Allow custom fees"},{"location":"using-zec-qt-wallet/#shield-change-automatically-to-sapling-address","text":"","title":"Shield change automatically to Sapling address"},{"location":"using-zec-qt-wallet/#connect-via-tor","text":"","title":"Connect via TOR"},{"location":"using-zec-qt-wallet/#encrypted-memo-field","text":"","title":"Encrypted Memo field"},{"location":"using-zec-qt-wallet/#including-a-reply-address","text":"","title":"Including a reply address"},{"location":"using-zec-qt-wallet/#replying-to-a-memo","text":"","title":"Replying to a memo"},{"location":"using-zec-qt-wallet/#exporting-transactions","text":"","title":"Exporting transactions"},{"location":"using-zec-qt-wallet/#apps","text":"","title":"Apps"},{"location":"using-zec-qt-wallet/#using-z-boardnet","text":"","title":"Using z-board.net"},{"location":"using-zec-qt-wallet/#turnstile-migration","text":"","title":"Turnstile migration"},{"location":"using-zec-qt-wallet/#customising-zcashconf","text":"","title":"Customising zcash.conf"},{"location":"using-zec-qt-wallet/#connecting-to-an-external-zcashd","text":"","title":"Connecting to an external zcashd"}]}