{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zec-qt-wallet Documentation zec-qt-wallet is a z-Addr first, Sapling compatible wallet and full node for zcashd that runs on Linux, Windows and macOS. zec-qt-wallet is NOT an official wallet, and is not affiliated with the Zerocoin Electric Coin Company in any way.","title":"Home"},{"location":"#zec-qt-wallet-documentation","text":"zec-qt-wallet is a z-Addr first, Sapling compatible wallet and full node for zcashd that runs on Linux, Windows and macOS. zec-qt-wallet is NOT an official wallet, and is not affiliated with the Zerocoin Electric Coin Company in any way.","title":"zec-qt-wallet Documentation"},{"location":"android/","text":"Android Companion App The Android app is beta software Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the Zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet . ZecQT Android is an Android frontend for zec-qt-wallet that lets you send and receive payments from your mobile phone. Participating in the beta ZecQT Android is currently in beta, and to participate in the beta program, you need to run zec-qt-wallet and install the APK on your Android phone. Head to the releases page to download the APK. In order to let your Android phone connect to your desktop, you need to run a special version of zec-qt-wallet. You can download it from the releases page and run the binary for your platform. Note that the regular version of zec-qt-wallet doesn t let you connect your Android phone. You can run your standard version of zcashd or let zec-qt-wallet run its embedded zcashd. Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the Zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet . After your node is synced, go to Apps- Connect Mobile App to view the connection QR Code that you can scan on the app. Install the Android APK You ll need to allow Install from untrusted sources on your Android phone to install this APK. This is so that you can install the beta APK directly on your phone. (When this is publicly released, you ll be able to get it from the Google Play Store). What is a direct connection vs connect over the internet/via wormhole.zecqtwallet.com When your phone and your desktop are on the same network (eg. on your home network), your phone can directly reach your desktop over your local network (if there are no firewalls blocking the connection). In this scenario, your phone directly communicates with your desktop zec-qt-wallet. This is the default. If your phone is on a different network (if you re connected via 4G/LTE, for example) or if your desktop zec-qt-wallet is behind a firewall, your phone can t directly reach your desktop. In this scenario, your phone and desktop both connect to a service run by zec-qt-wallet (called wormhole.zecqtwallet.com), which routes information between your phone and your desktop. Android App FAQ How can I ensure that only direct connections are enabled? This is already the default. If you want to connect over the internet via wormhole.zecqtwallet.com, you will need to opt-in by checking the Connect over internet checkbox on the connection page. You can also disable connecting over the internet via wormhole.zecqtwallet.com in the Android app s settings. What data can the wormhole service see? All communication is encrypted end-to-end, so the wormhole service can t see the content of your messages. It can see some meta-data like the IP addresses and date/timestamps. Will it always connect via the wormhole service? The Android app will first attempt a direct connection each time you open the App. If a direct connection is not possible, it will then attempt to connect via wormhole (if enabled) How can I safely connect over the internet without using the wormhole service? You ll need to install a VPN on your home network, so you can VPN into your network from 4G/LTE networks, and then connect directly to your node. For example you can use a service such as Pi VPN . Currently known limitations After you download and install the APK, launch the program and scan the QR Code from your desktop to connect the two. Currently known limitations Old-style Sprout addresses are not supported You can t select which address to send from. zec-qt-wallet will try to send Transactions from a Sapling address, given you have enough balance You can t generate new z-addrs or t-addrs from the phone. Issues or feature requests Please file all the feedback you can. You can file issues in the issues tab .","title":"Android Companion App"},{"location":"android/#android-companion-app","text":"The Android app is beta software Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the Zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet . ZecQT Android is an Android frontend for zec-qt-wallet that lets you send and receive payments from your mobile phone.","title":"Android Companion App"},{"location":"android/#participating-in-the-beta","text":"ZecQT Android is currently in beta, and to participate in the beta program, you need to run zec-qt-wallet and install the APK on your Android phone. Head to the releases page to download the APK. In order to let your Android phone connect to your desktop, you need to run a special version of zec-qt-wallet. You can download it from the releases page and run the binary for your platform. Note that the regular version of zec-qt-wallet doesn t let you connect your Android phone. You can run your standard version of zcashd or let zec-qt-wallet run its embedded zcashd. Although everything will work fine on mainnet, since this is beta software, it is recommended you run it on the Zcash testnet. Add testnet=1 into your zcash.conf to enable the testnet . After your node is synced, go to Apps- Connect Mobile App to view the connection QR Code that you can scan on the app.","title":"Participating in the beta"},{"location":"android/#install-the-android-apk","text":"You ll need to allow Install from untrusted sources on your Android phone to install this APK. This is so that you can install the beta APK directly on your phone. (When this is publicly released, you ll be able to get it from the Google Play Store).","title":"Install the Android APK"},{"location":"android/#what-is-a-direct-connection-vs-connect-over-the-internetvia-wormholezecqtwalletcom","text":"When your phone and your desktop are on the same network (eg. on your home network), your phone can directly reach your desktop over your local network (if there are no firewalls blocking the connection). In this scenario, your phone directly communicates with your desktop zec-qt-wallet. This is the default. If your phone is on a different network (if you re connected via 4G/LTE, for example) or if your desktop zec-qt-wallet is behind a firewall, your phone can t directly reach your desktop. In this scenario, your phone and desktop both connect to a service run by zec-qt-wallet (called wormhole.zecqtwallet.com), which routes information between your phone and your desktop.","title":"What is a \"direct connection\" vs \"connect over the internet/via wormhole.zecqtwallet.com\""},{"location":"android/#android-app-faq","text":"","title":"Android App FAQ"},{"location":"android/#how-can-i-ensure-that-only-direct-connections-are-enabled","text":"This is already the default. If you want to connect over the internet via wormhole.zecqtwallet.com, you will need to opt-in by checking the Connect over internet checkbox on the connection page. You can also disable connecting over the internet via wormhole.zecqtwallet.com in the Android app s settings.","title":"How can I ensure that only direct connections are enabled?"},{"location":"android/#what-data-can-the-wormhole-service-see","text":"All communication is encrypted end-to-end, so the wormhole service can t see the content of your messages. It can see some meta-data like the IP addresses and date/timestamps.","title":"What data can the wormhole service see?"},{"location":"android/#will-it-always-connect-via-the-wormhole-service","text":"The Android app will first attempt a direct connection each time you open the App. If a direct connection is not possible, it will then attempt to connect via wormhole (if enabled)","title":"Will it always connect via the wormhole service?"},{"location":"android/#how-can-i-safely-connect-over-the-internet-without-using-the-wormhole-service","text":"You ll need to install a VPN on your home network, so you can VPN into your network from 4G/LTE networks, and then connect directly to your node. For example you can use a service such as Pi VPN .","title":"How can I safely connect over the internet without using the wormhole service?"},{"location":"android/#currently-known-limitations","text":"After you download and install the APK, launch the program and scan the QR Code from your desktop to connect the two. Currently known limitations Old-style Sprout addresses are not supported You can t select which address to send from. zec-qt-wallet will try to send Transactions from a Sapling address, given you have enough balance You can t generate new z-addrs or t-addrs from the phone.","title":"Currently known limitations"},{"location":"android/#issues-or-feature-requests","text":"Please file all the feedback you can. You can file issues in the issues tab .","title":"Issues or feature requests"},{"location":"compile-from-source/","text":"Compiling from source Prerequisites To build zec-qt-wallet locally, you need to install Qt v5.11 or higher. You can get the latest opensource verison from the Qt download site . Download and install the qt version for your platform. During the installation, please also select the build version for your platform/compiler. zec-qt-wallet is written in C++ 14, so you ll also need a modern C++ compiler like g++/clang++/visual c++ depending on your platform. Building on Linux First install the pre-requisites sudo apt install libgl1-mesa-dev git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make -j$(nproc) ./zec-qt-wallet Building on Windows You need Visual Studio 2017 (The free C++ Community Edition works just fine). Alternately, you can cross-compile on Linux for Windows using the mingw compiler. See cross-compile instructions here . From the VS Tools command prompt git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -spec win32-msvc CONFIG+=debug nmake debug\\zec-qt-wallet.exe To create the Visual Studio project files so you can compile and run from Visual Studio: c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -tp vc CONFIG+=debug Building on Mac You need to install the XCode app or the XCode command line tools first, and then install Qt. git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make ./zec-qt-wallet.app/Contents/MacOS/zec-qt-wallet","title":"Compiling from source"},{"location":"compile-from-source/#compiling-from-source","text":"","title":"Compiling from source"},{"location":"compile-from-source/#prerequisites","text":"To build zec-qt-wallet locally, you need to install Qt v5.11 or higher. You can get the latest opensource verison from the Qt download site . Download and install the qt version for your platform. During the installation, please also select the build version for your platform/compiler. zec-qt-wallet is written in C++ 14, so you ll also need a modern C++ compiler like g++/clang++/visual c++ depending on your platform.","title":"Prerequisites"},{"location":"compile-from-source/#building-on-linux","text":"First install the pre-requisites sudo apt install libgl1-mesa-dev git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make -j$(nproc) ./zec-qt-wallet","title":"Building on Linux"},{"location":"compile-from-source/#building-on-windows","text":"You need Visual Studio 2017 (The free C++ Community Edition works just fine). Alternately, you can cross-compile on Linux for Windows using the mingw compiler. See cross-compile instructions here . From the VS Tools command prompt git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -spec win32-msvc CONFIG+=debug nmake debug\\zec-qt-wallet.exe To create the Visual Studio project files so you can compile and run from Visual Studio: c:\\Qt5\\bin\\qmake.exe zec-qt-wallet.pro -tp vc CONFIG+=debug","title":"Building on Windows"},{"location":"compile-from-source/#building-on-mac","text":"You need to install the XCode app or the XCode command line tools first, and then install Qt. git clone https://github.com/adityapk00/zec-qt-wallet.git cd zec-qt-wallet /path/to/qt5/bin/qmake zec-qt-wallet.pro CONFIG+=debug make ./zec-qt-wallet.app/Contents/MacOS/zec-qt-wallet","title":"Building on Mac"},{"location":"faq/","text":"FAQ Installation Where do I download the software? zec-qt-wallet is available to download from the Zcash Foundation Github repository . The releases page lists the latest available downloads for each platform. The Android application which is still in beta may be downloaded from (link to app page) Which installer should I download? See the installation section for more details for your platform. How do I verify the download file? All releases are signed and may be verified? Blockchain Is zec-qt-wallet a light client? No, zec-qt-wallet requires a full zcashd node to operate. A light client protocol is currently in development that would substantially reduce the storage and bandwidth requirements for a light wallet and once this development is complete How large is the blockchain? Currently the blockchain data directory is around 25GB (Feb, 2019) and will continue to grow with time. Can I move the data directory? If you are starting zec-qt-wallet for the first time then you can choose the advanced configuration (image of this) and select the location of your data directory, which may for example be on a seperate disk. If you have an existing data directory you would like to move, you can achieve this through the following steps: Create the new directory Copy everything in your existing data directory to the new location Update zcash.conf with the datadir=/your/new/path Restart zec-qt-wallet Can I move the params directory? No, unlike the data directory there is no configurable option to specify the params directory and zcashd expects the Params directory to be in the following locations: //TODO check this Windows: %HOMEPATH%\\AppData\\Roaming\\ZcashParams macOS: ~/Library/Application Support/ZcashParams Linux: ~/.zcashparams As a workaround you can use any filesystem operations for your OS e.g. creating a sysmlink of the directory but these are unsupported. Transactions Can I use funds with zero confirmations? No, Zcash requires that you have at least 1 confirmation before sending. Trying to spend unconfirmed funds will result in an error. Can I use a custom fee? Yes, though it is adviced to use the default 0.0001 fee to prevent your transactions from being distinguishable you may override this behaviour in the app Options . What s the difference between transparent, Sprout and Sapling addresses? Transparent addresses start with a t prefix and are transparent like Bitcoin and offer no privacy properties. Sprout addressess have a zc prefix and are the first generation of shielded addresses. Sprout addresses have been superseeded by Sapling address which have a zs prefix. While Sprout addresses may still be used it is recommended to use Sapling addresses due to the massive performance improvements (link). To move funds between Sprout and Sapling addresses see the turnstile (link). For more information on the use of addresses in Zcash see this page . How long does a Sapling transaction take? Sapling greatly reduced the time taken to perform proofs down to just a few seconds. Sprout transactions take around 70-90 seconds and is dependent on hardware and the number of JoinSplits. https://z.cash/blog/reducing-shielded-proving-time-in-sapling/ zcashd node Where is the default data directory on each platform? Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf macOS: ~/Library/Application Support/Zcash/zcash.conf Linux: ~/.zcash/zcash.conf Where is zcash.conf located? zcash.conf is located in the default data directory and will be in this location even if the datadir has been moved to a different location. Can I use zec-qt-wallet with a remote node? Yes, zec-qt-wallet will attempt to connect to You should not (see security settings) Does zec-qt-wallet work on testnet? Yes, zec-qt-wallet will work with testnet. To do so you simply add the following lines to your zcash.conf file, replacing the existing values if present: addnode=testnet.z.cash testnet=1 Does zec-qt-wallet support selective disclosure? Not yet. While selective disclosure works on Sprout addresses it has not yet been updated in zcashd to support Sapling addresses. Does zec-qt-wallet support viewing keys? zcashd doesn\u2019t currently support Sapling viewing keys yet and will be implemented once supported. Wallet Is the wallet encrypted? No wallet encryption is currently disabled by zcashd . Users are advised to use full disk encyption or to manually encrpyt/decrypt their wallet.dat files when not using the software. Why does my change go to a new address? Like Bitcoin when using transparent addresses change from a transaction goes to a new transparent address. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the app Options . As for transparent addresses this was a measure to preserve privacy and prevent trivial linking of transactions on the blockchain shielded (z) addresses do not have this property and any change is returned to the sending address. Will zec-qt wallet remember my outgoing shielded sends? Yes, by default zec-qt-wallet will store shielded sends in a local database as zcashd does not provide this information. You caan override this behaviour in the Options setting and can remove any stored transactions at any time (note that these will not be recoverable if you delete them). Can I remove shielded transactions sends from persisting in the wallet? Yes, simply click the Clear History button in the Options . Note that if you do this you will not later be able to recover these sends. How do I read a memo? If there is a memo attached to a transaction then it will be visible by a message icon by the transaction. Simply right click the transaction and choose View Memo . Can I use zec-qt-wallet with a hardware wallet? No, this is currently not supported. Can I remove an address from the wallet? No, addresses cannot be removed from the wallet. It is advised that you export the private keys for addresses you are interested in and then delete the wallet.dat file. You can then import the private keys you require. Seed phrases Can zec-qt-wallet export a 12/18/24 word seed No, zcashd does not support BIP xxx. Sapling does use a HD wallet xxx https://z.cash/blog/sapling-in-hd/ Where can I find the Sapling HD seed? https://z.cash/blog/sapling-in-hd/ In zcashd only Sapling addresses are HD compatible. There is a Sapling master seed but this is currently not accessible to the zec-qt-wallet. To get this seed you need to run the following command via the zcashd CLI. zcash-cli z_exportwallet having set an export path in your zcash.conf . The Sapling seed will be displayed at the top of the file in the format Can I import a Sapling HD seed It should be noted that it is currently not possible to import the seed to zcashd but this functionality will be enabled shorty. Can I mine with zec-qt-wallet? No, zec-qt-wallet is a wallet and full node. while you can configure zcashd to run the inbuilt CPU miner this isn t practical to run on mainnet and you need alternative hardware and software to run. See this page for more information on mining https://www.zcashcommunity.com/mining/ WinZEC How do I upgrade from WinZEC? TLDR just install zec-qt-wallet and it ll work. WinZEC has now been deprecated. You can simply install zec-qt-wallet and it ll use the existing data directory and wallet from WinZEC and operate as normal. Can I import WinZEC address book? Yes, simply browse to the location of the address book file. By default this will be %HOMEPATH%\\AppData\\Local\\ZcashSwingWalletUI\\addressBook.csv where %/HOMEPATH% is typically C:\\Users\\YourUsername\\ and you may need to enable viewing hidden files to browse to the AppData folder location. what languages is zec-qt-wallet available in Currently it is available in xxx. If you want to help by translating see the translations page","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#installation","text":"","title":"Installation"},{"location":"faq/#where-do-i-download-the-software","text":"zec-qt-wallet is available to download from the Zcash Foundation Github repository . The releases page lists the latest available downloads for each platform. The Android application which is still in beta may be downloaded from (link to app page)","title":"Where do I download the software?"},{"location":"faq/#which-installer-should-i-download","text":"See the installation section for more details for your platform.","title":"Which installer should I download?"},{"location":"faq/#how-do-i-verify-the-download-file","text":"All releases are signed and may be verified?","title":"How do I verify the download file?"},{"location":"faq/#blockchain","text":"","title":"Blockchain"},{"location":"faq/#is-zec-qt-wallet-a-light-client","text":"No, zec-qt-wallet requires a full zcashd node to operate. A light client protocol is currently in development that would substantially reduce the storage and bandwidth requirements for a light wallet and once this development is complete","title":"Is zec-qt-wallet a light client?"},{"location":"faq/#how-large-is-the-blockchain","text":"Currently the blockchain data directory is around 25GB (Feb, 2019) and will continue to grow with time.","title":"How large is the blockchain?"},{"location":"faq/#can-i-move-the-data-directory","text":"If you are starting zec-qt-wallet for the first time then you can choose the advanced configuration (image of this) and select the location of your data directory, which may for example be on a seperate disk. If you have an existing data directory you would like to move, you can achieve this through the following steps: Create the new directory Copy everything in your existing data directory to the new location Update zcash.conf with the datadir=/your/new/path Restart zec-qt-wallet","title":"Can I move the data directory?"},{"location":"faq/#can-i-move-the-params-directory","text":"No, unlike the data directory there is no configurable option to specify the params directory and zcashd expects the Params directory to be in the following locations: //TODO check this Windows: %HOMEPATH%\\AppData\\Roaming\\ZcashParams macOS: ~/Library/Application Support/ZcashParams Linux: ~/.zcashparams As a workaround you can use any filesystem operations for your OS e.g. creating a sysmlink of the directory but these are unsupported.","title":"Can I move the params directory?"},{"location":"faq/#transactions","text":"","title":"Transactions"},{"location":"faq/#can-i-use-funds-with-zero-confirmations","text":"No, Zcash requires that you have at least 1 confirmation before sending. Trying to spend unconfirmed funds will result in an error.","title":"Can I use funds with zero confirmations?"},{"location":"faq/#can-i-use-a-custom-fee","text":"Yes, though it is adviced to use the default 0.0001 fee to prevent your transactions from being distinguishable you may override this behaviour in the app Options .","title":"Can I use a custom fee?"},{"location":"faq/#whats-the-difference-between-transparent-sprout-and-sapling-addresses","text":"Transparent addresses start with a t prefix and are transparent like Bitcoin and offer no privacy properties. Sprout addressess have a zc prefix and are the first generation of shielded addresses. Sprout addresses have been superseeded by Sapling address which have a zs prefix. While Sprout addresses may still be used it is recommended to use Sapling addresses due to the massive performance improvements (link). To move funds between Sprout and Sapling addresses see the turnstile (link). For more information on the use of addresses in Zcash see this page .","title":"What's the difference between transparent, Sprout and Sapling addresses?"},{"location":"faq/#how-long-does-a-sapling-transaction-take","text":"Sapling greatly reduced the time taken to perform proofs down to just a few seconds. Sprout transactions take around 70-90 seconds and is dependent on hardware and the number of JoinSplits. https://z.cash/blog/reducing-shielded-proving-time-in-sapling/","title":"How long does a Sapling transaction take?"},{"location":"faq/#zcashd-node","text":"","title":"zcashd node"},{"location":"faq/#where-is-the-default-data-directory-on-each-platform","text":"Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf macOS: ~/Library/Application Support/Zcash/zcash.conf Linux: ~/.zcash/zcash.conf","title":"Where is the default data directory on each platform?"},{"location":"faq/#where-is-zcashconf-located","text":"zcash.conf is located in the default data directory and will be in this location even if the datadir has been moved to a different location.","title":"Where is zcash.conf located?"},{"location":"faq/#can-i-use-zec-qt-wallet-with-a-remote-node","text":"Yes, zec-qt-wallet will attempt to connect to You should not (see security settings)","title":"Can I use zec-qt-wallet with a remote node?"},{"location":"faq/#does-zec-qt-wallet-work-on-testnet","text":"Yes, zec-qt-wallet will work with testnet. To do so you simply add the following lines to your zcash.conf file, replacing the existing values if present: addnode=testnet.z.cash testnet=1","title":"Does zec-qt-wallet work on testnet?"},{"location":"faq/#does-zec-qt-wallet-support-selective-disclosure","text":"Not yet. While selective disclosure works on Sprout addresses it has not yet been updated in zcashd to support Sapling addresses.","title":"Does zec-qt-wallet support selective disclosure?"},{"location":"faq/#does-zec-qt-wallet-support-viewing-keys","text":"zcashd doesn\u2019t currently support Sapling viewing keys yet and will be implemented once supported.","title":"Does zec-qt-wallet support viewing keys?"},{"location":"faq/#wallet","text":"","title":"Wallet"},{"location":"faq/#is-the-wallet-encrypted","text":"No wallet encryption is currently disabled by zcashd . Users are advised to use full disk encyption or to manually encrpyt/decrypt their wallet.dat files when not using the software.","title":"Is the wallet encrypted?"},{"location":"faq/#why-does-my-change-go-to-a-new-address","text":"Like Bitcoin when using transparent addresses change from a transaction goes to a new transparent address. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the app Options . As for transparent addresses this was a measure to preserve privacy and prevent trivial linking of transactions on the blockchain shielded (z) addresses do not have this property and any change is returned to the sending address.","title":"Why does my change go to a new address?"},{"location":"faq/#will-zec-qt-wallet-remember-my-outgoing-shielded-sends","text":"Yes, by default zec-qt-wallet will store shielded sends in a local database as zcashd does not provide this information. You caan override this behaviour in the Options setting and can remove any stored transactions at any time (note that these will not be recoverable if you delete them).","title":"Will zec-qt wallet remember my outgoing shielded sends?"},{"location":"faq/#can-i-remove-shielded-transactions-sends-from-persisting-in-the-wallet","text":"Yes, simply click the Clear History button in the Options . Note that if you do this you will not later be able to recover these sends.","title":"Can I remove shielded transactions sends from persisting in the wallet?"},{"location":"faq/#how-do-i-read-a-memo","text":"If there is a memo attached to a transaction then it will be visible by a message icon by the transaction. Simply right click the transaction and choose View Memo .","title":"How do I read a memo?"},{"location":"faq/#can-i-use-zec-qt-wallet-with-a-hardware-wallet","text":"No, this is currently not supported.","title":"Can I use zec-qt-wallet with a hardware wallet?"},{"location":"faq/#can-i-remove-an-address-from-the-wallet","text":"No, addresses cannot be removed from the wallet. It is advised that you export the private keys for addresses you are interested in and then delete the wallet.dat file. You can then import the private keys you require.","title":"Can I remove an address from the wallet?"},{"location":"faq/#seed-phrases","text":"","title":"Seed phrases"},{"location":"faq/#can-zec-qt-wallet-export-a-121824-word-seed","text":"No, zcashd does not support BIP xxx. Sapling does use a HD wallet xxx https://z.cash/blog/sapling-in-hd/","title":"Can zec-qt-wallet export a 12/18/24 word seed"},{"location":"faq/#where-can-i-find-the-sapling-hd-seed","text":"https://z.cash/blog/sapling-in-hd/ In zcashd only Sapling addresses are HD compatible. There is a Sapling master seed but this is currently not accessible to the zec-qt-wallet. To get this seed you need to run the following command via the zcashd CLI. zcash-cli z_exportwallet having set an export path in your zcash.conf . The Sapling seed will be displayed at the top of the file in the format","title":"Where can I find the Sapling HD seed?"},{"location":"faq/#can-i-import-a-sapling-hd-seed","text":"It should be noted that it is currently not possible to import the seed to zcashd but this functionality will be enabled shorty.","title":"Can I import a Sapling HD seed"},{"location":"faq/#can-i-mine-with-zec-qt-wallet","text":"No, zec-qt-wallet is a wallet and full node. while you can configure zcashd to run the inbuilt CPU miner this isn t practical to run on mainnet and you need alternative hardware and software to run. See this page for more information on mining https://www.zcashcommunity.com/mining/","title":"Can I mine with zec-qt-wallet?"},{"location":"faq/#winzec","text":"","title":"WinZEC"},{"location":"faq/#how-do-i-upgrade-from-winzec","text":"TLDR just install zec-qt-wallet and it ll work. WinZEC has now been deprecated. You can simply install zec-qt-wallet and it ll use the existing data directory and wallet from WinZEC and operate as normal.","title":"How do I upgrade from WinZEC?"},{"location":"faq/#can-i-import-winzec-address-book","text":"Yes, simply browse to the location of the address book file. By default this will be %HOMEPATH%\\AppData\\Local\\ZcashSwingWalletUI\\addressBook.csv where %/HOMEPATH% is typically C:\\Users\\YourUsername\\ and you may need to enable viewing hidden files to browse to the AppData folder location.","title":"Can I import WinZEC address book?"},{"location":"faq/#what-languages-is-zec-qt-wallet-available-in","text":"Currently it is available in xxx. If you want to help by translating see the translations page","title":"what languages is zec-qt-wallet available in"},{"location":"installation/","text":"Installing zec-qt-wallet Download and Install zec-qt-wallet runs on Windows, macOS and Linux and is available to download from the releases page of the project Github repository. Follow the instructions below for the platform of your choice to install zec-qt-wallet. To compile from source see this section . Windows instructions (click to expand) Download and run the .msi installer (named Windows-installer-zec-qt-wallet-vx.x.x.msi) and follow the prompts. Alternately, you can download the release binary (named Windows-binaries-zec-qt-wallet-vx.x.x.zip), unzip it and double click on zec-qt-wallet to start. macOS instructions (click to expand) Download and double-click on the .dmg file to open it, and drag zec-qt-wallet on to the Applications link to install. You will need to give authorization for the program to run. Linux instructions (click to expand) If you are on Debian/Ubuntu, please download the .deb package and install it. sudo dpkg -i linux-deb-zec-qt-wallet-v0.5.9.deb sudo apt install -f Or you can download and run the binaries directly. tar -xvf zec-qt-wallet-v0.5.9.tar.gz ./zec-qt-wallet-v0.5.9/zec-qt-wallet zcashd zec-qt-wallet needs a Zcash node running zcashd . If you already have a zcashd node running, zec-qt-wallet will connect to it. If you don t have one running, zec-qt-wallet will start its embedded zcashd node. Additionally, if this is the first time you re running zec-qt-wallet or a zcashd daemon, zec-qt-wallet will download the zcash params (~1.7 GB) and configure zcash.conf for you. Disable embedded zcashd To force disabling the embedded zcashd and only connect to a remote node pass --no-embedded to the startup command. System requirements If using the embedded zcashd the recommended system requirements are 5GB of free RAM and 10GB of free disk (the size of the blockchain increases over time). Compiling from source zec-qt-wallet is written in C++ 14, and can be compiled with g++/clang++/visual c++. It also depends on Qt5, which you can get from here . Note that if you are compiling from source, you won t get the embedded zcashd by default. You can either run an external zcashd, or compile zcashd as well. See the instructions for setting up a build environment and detailed build instructions for each platform here . Upgrading It is important to keep your version of zec-qt-wallet up to date as new features are regularely added and bugs fixed. To download simply follow the instructions to install as your data directory and wallet will be untouched throughout. zcashd reaches end of service halt after 16 weeks If you are using the embedded zcashd then after 16 weeks from release zcashd will reach an end of service halt and will shutdown. Simply update your version of zec-qt-wallet to continue. zec-qt-wallet also has an update notifier that will notify you if there s a new release of zec-qt-wallet available.","title":"Installing on Windows, Mac and Linux"},{"location":"installation/#installing-zec-qt-wallet","text":"","title":"Installing zec-qt-wallet"},{"location":"installation/#download-and-install","text":"zec-qt-wallet runs on Windows, macOS and Linux and is available to download from the releases page of the project Github repository. Follow the instructions below for the platform of your choice to install zec-qt-wallet. To compile from source see this section . Windows instructions (click to expand) Download and run the .msi installer (named Windows-installer-zec-qt-wallet-vx.x.x.msi) and follow the prompts. Alternately, you can download the release binary (named Windows-binaries-zec-qt-wallet-vx.x.x.zip), unzip it and double click on zec-qt-wallet to start. macOS instructions (click to expand) Download and double-click on the .dmg file to open it, and drag zec-qt-wallet on to the Applications link to install. You will need to give authorization for the program to run. Linux instructions (click to expand) If you are on Debian/Ubuntu, please download the .deb package and install it. sudo dpkg -i linux-deb-zec-qt-wallet-v0.5.9.deb sudo apt install -f Or you can download and run the binaries directly. tar -xvf zec-qt-wallet-v0.5.9.tar.gz ./zec-qt-wallet-v0.5.9/zec-qt-wallet","title":"Download and Install"},{"location":"installation/#zcashd","text":"zec-qt-wallet needs a Zcash node running zcashd . If you already have a zcashd node running, zec-qt-wallet will connect to it. If you don t have one running, zec-qt-wallet will start its embedded zcashd node. Additionally, if this is the first time you re running zec-qt-wallet or a zcashd daemon, zec-qt-wallet will download the zcash params (~1.7 GB) and configure zcash.conf for you. Disable embedded zcashd To force disabling the embedded zcashd and only connect to a remote node pass --no-embedded to the startup command.","title":"zcashd"},{"location":"installation/#system-requirements","text":"If using the embedded zcashd the recommended system requirements are 5GB of free RAM and 10GB of free disk (the size of the blockchain increases over time).","title":"System requirements"},{"location":"installation/#compiling-from-source","text":"zec-qt-wallet is written in C++ 14, and can be compiled with g++/clang++/visual c++. It also depends on Qt5, which you can get from here . Note that if you are compiling from source, you won t get the embedded zcashd by default. You can either run an external zcashd, or compile zcashd as well. See the instructions for setting up a build environment and detailed build instructions for each platform here .","title":"Compiling from source"},{"location":"installation/#upgrading","text":"It is important to keep your version of zec-qt-wallet up to date as new features are regularely added and bugs fixed. To download simply follow the instructions to install as your data directory and wallet will be untouched throughout. zcashd reaches end of service halt after 16 weeks If you are using the embedded zcashd then after 16 weeks from release zcashd will reach an end of service halt and will shutdown. Simply update your version of zec-qt-wallet to continue. zec-qt-wallet also has an update notifier that will notify you if there s a new release of zec-qt-wallet available.","title":"Upgrading"},{"location":"setting-up-build-env/","text":"Setup a build environment Linux Pre-requisites It s best to set up a build environment on Ubuntu 16.04. It brings the right versions of libc and libstdc++ that ensures maximum compatibility. You can build on newer versions of Linux distros, but binaries compiled on these platforms may not work on older versions. # build dependencies sudo apt install clang g++ build-essential make mingw-w64 git pkg-config libc6-dev m4 g++-multilib autoconf libtool-bin ncurses-dev unzip python python-zmq zlib1g-dev wget curl bsdmainutils automake libgl1-mesa-dev libglu1-mesa-dev libfontconfig1-dev autopoint libssl-dev # MXE dependencies sudo apt install bash bison bzip2 flex gettext git gperf intltool libc6-dev-i386 libgdk-pixbuf2.0-dev libltdl-dev libtool-bin libxml-parser-perl make openssl p7zip-full patch perl pkg-config python ruby sed unzip wget xz-utils Compile OpenSSL You need to compile a static version of OpenSSL, which is passed to the Qt5 configuration script # Download openssl 1.0.2 ./Configure linux-x86_64 make Static build of Qt5 Download Qt5 Sources mkdir -p ~/Qt/5.11.2 cd ~/Qt/5.11.2 wget https://download.qt.io/archive/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xz tar xvf qt-everywhere-src-5.11.2.tar.xz cd qt-everywhere-src-5.11.2 Configure and build Qt5 statically OPENSSL_LIBS= -L/path/to/openssl-1.0.2q -lssl -lcrypto ./configure -static -prefix ~/Qt/5.11.2/static -skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin -nomake examples -nomake tests -qt-zlib -qt-libpng -qt-xcb -qt-xkbcommon -feature-fontconfig -no-feature-getentropy -release -openssl-linked -opensource make -j$(nproc) make -j$(nproc) install Build MXE (Cross-compiled Qt5 for Windows in Linux) mkdir ~/github cd ~/github git clone https://github.com/mxe/mxe.git cd mxe make -j$(nproc) MXE_TARGETS=x86_64-w64-mingw32.static qtbase qtwebsockets Build zec-qt-wallet git clone git@github.com:adityapk00/zec-qt-wallet.git ~/Qt/5.11.2/static/bin/qmake zec-qt-wallet.pro CONFIG+=debug-spec linux-clang make -j$(nproc) Compiling zcashd for embedded zcashd git clone git@github.com:adityapk00/zcash zcash-linux git clone git@github.com:adityapk00/zcash zcash-win mkdir -p ~/zcash/artifacts # Built zcashd goes here. Note that we create two separate folders, because we re going to compile zcashd for windows and linux. Build zcashd windows cd zcash-win ./mkreleasewin.sh Build zcashd linux cd zcash-linux ./mkreleaselinux.sh Setup Environment Add the following paths to your ~/.bashrc . Remember to add it at the very top, before the interactivity check, because we need these variables even in an ssh shell. export QT_STATIC=~/Qt/5.11.2/static/ export MXE_PATH=~/github/mxe/usr/bin/ export ZCASH_DIR=~/github/zcash Make release build PREV_VERSION=0.2.5 APP_VERSION=0.2.6 src/scripts/mkrelease.sh This will put all the windows and linux compiled binaries into the artifacts folder macOS Install Xcode or Xcode Command Line Tools, and then install Qt 5.11 From a terminal: cd ~/github/zec-qt-wallet/ APP_VERSION=0.3.0 src/scripts/mkmacdmg.sh This will build the app and package it into a dmg and place it in the artifacts/ folder Building zcashd git clone git@github.com:adityapk00/zcash cd zcash ./zcutil/build.sh -j$(nproc) mkdir artifacts/ cp src/zcashd artifacts/ cp src/zcash-cli artifacts/ Windows Even though zec-qt-wallet for Windows is cross-compiled on Linux, we still need a windows machine to build the installer. The windows installer is built using WiX toolset. Install WiX toolset 3.11.1 from here . After installation, please add the directory to the system path (both candle.exe and light.exe are runnable) To build the installer, in Powershell, run APP_VERSION=0.3.0 src/scripts/mkwininstaller.ps1 Running the unified build After all these 3 machines have been setup, we can build all the release artifacts (windows, linux, macOS binaries and installers) with one command, triggered from the Windows machine. (Replace u1604 and macmini with names of the linux and macOS machines respectively) cd ~/github/zec-qt-wallet .\\src\\scripts\\dobuild.ps1 -version 0.4.1 -prev 0.4.0 -server u1604 -macserver macmini This will build all 3 platforms and their installers, and place everything in the artifacts folder on the windows machine.","title":"Setting up a build environment"},{"location":"setting-up-build-env/#setup-a-build-environment","text":"","title":"Setup a build environment"},{"location":"setting-up-build-env/#linux","text":"","title":"Linux"},{"location":"setting-up-build-env/#pre-requisites","text":"It s best to set up a build environment on Ubuntu 16.04. It brings the right versions of libc and libstdc++ that ensures maximum compatibility. You can build on newer versions of Linux distros, but binaries compiled on these platforms may not work on older versions. # build dependencies sudo apt install clang g++ build-essential make mingw-w64 git pkg-config libc6-dev m4 g++-multilib autoconf libtool-bin ncurses-dev unzip python python-zmq zlib1g-dev wget curl bsdmainutils automake libgl1-mesa-dev libglu1-mesa-dev libfontconfig1-dev autopoint libssl-dev # MXE dependencies sudo apt install bash bison bzip2 flex gettext git gperf intltool libc6-dev-i386 libgdk-pixbuf2.0-dev libltdl-dev libtool-bin libxml-parser-perl make openssl p7zip-full patch perl pkg-config python ruby sed unzip wget xz-utils","title":"Pre-requisites"},{"location":"setting-up-build-env/#compile-openssl","text":"You need to compile a static version of OpenSSL, which is passed to the Qt5 configuration script # Download openssl 1.0.2 ./Configure linux-x86_64 make","title":"Compile OpenSSL"},{"location":"setting-up-build-env/#static-build-of-qt5","text":"Download Qt5 Sources mkdir -p ~/Qt/5.11.2 cd ~/Qt/5.11.2 wget https://download.qt.io/archive/qt/5.11/5.11.2/single/qt-everywhere-src-5.11.2.tar.xz tar xvf qt-everywhere-src-5.11.2.tar.xz cd qt-everywhere-src-5.11.2 Configure and build Qt5 statically OPENSSL_LIBS= -L/path/to/openssl-1.0.2q -lssl -lcrypto ./configure -static -prefix ~/Qt/5.11.2/static -skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin -nomake examples -nomake tests -qt-zlib -qt-libpng -qt-xcb -qt-xkbcommon -feature-fontconfig -no-feature-getentropy -release -openssl-linked -opensource make -j$(nproc) make -j$(nproc) install","title":"Static build of Qt5"},{"location":"setting-up-build-env/#build-mxe-cross-compiled-qt5-for-windows-in-linux","text":"mkdir ~/github cd ~/github git clone https://github.com/mxe/mxe.git cd mxe make -j$(nproc) MXE_TARGETS=x86_64-w64-mingw32.static qtbase qtwebsockets","title":"Build MXE (Cross-compiled Qt5 for Windows in Linux)"},{"location":"setting-up-build-env/#build-zec-qt-wallet","text":"git clone git@github.com:adityapk00/zec-qt-wallet.git ~/Qt/5.11.2/static/bin/qmake zec-qt-wallet.pro CONFIG+=debug-spec linux-clang make -j$(nproc)","title":"Build zec-qt-wallet"},{"location":"setting-up-build-env/#compiling-zcashd-for-embedded-zcashd","text":"git clone git@github.com:adityapk00/zcash zcash-linux git clone git@github.com:adityapk00/zcash zcash-win mkdir -p ~/zcash/artifacts # Built zcashd goes here. Note that we create two separate folders, because we re going to compile zcashd for windows and linux. Build zcashd windows cd zcash-win ./mkreleasewin.sh Build zcashd linux cd zcash-linux ./mkreleaselinux.sh","title":"Compiling zcashd for embedded zcashd"},{"location":"setting-up-build-env/#setup-environment","text":"Add the following paths to your ~/.bashrc . Remember to add it at the very top, before the interactivity check, because we need these variables even in an ssh shell. export QT_STATIC=~/Qt/5.11.2/static/ export MXE_PATH=~/github/mxe/usr/bin/ export ZCASH_DIR=~/github/zcash","title":"Setup Environment"},{"location":"setting-up-build-env/#make-release-build","text":"PREV_VERSION=0.2.5 APP_VERSION=0.2.6 src/scripts/mkrelease.sh This will put all the windows and linux compiled binaries into the artifacts folder","title":"Make release build"},{"location":"setting-up-build-env/#macos","text":"Install Xcode or Xcode Command Line Tools, and then install Qt 5.11 From a terminal: cd ~/github/zec-qt-wallet/ APP_VERSION=0.3.0 src/scripts/mkmacdmg.sh This will build the app and package it into a dmg and place it in the artifacts/ folder","title":"macOS"},{"location":"setting-up-build-env/#building-zcashd","text":"git clone git@github.com:adityapk00/zcash cd zcash ./zcutil/build.sh -j$(nproc) mkdir artifacts/ cp src/zcashd artifacts/ cp src/zcash-cli artifacts/","title":"Building zcashd"},{"location":"setting-up-build-env/#windows","text":"Even though zec-qt-wallet for Windows is cross-compiled on Linux, we still need a windows machine to build the installer. The windows installer is built using WiX toolset. Install WiX toolset 3.11.1 from here . After installation, please add the directory to the system path (both candle.exe and light.exe are runnable) To build the installer, in Powershell, run APP_VERSION=0.3.0 src/scripts/mkwininstaller.ps1","title":"Windows"},{"location":"setting-up-build-env/#running-the-unified-build","text":"After all these 3 machines have been setup, we can build all the release artifacts (windows, linux, macOS binaries and installers) with one command, triggered from the Windows machine. (Replace u1604 and macmini with names of the linux and macOS machines respectively) cd ~/github/zec-qt-wallet .\\src\\scripts\\dobuild.ps1 -version 0.4.1 -prev 0.4.0 -server u1604 -macserver macmini This will build all 3 platforms and their installers, and place everything in the artifacts folder on the windows machine.","title":"Running the unified build"},{"location":"translations/","text":"Translating zec-qt-wallet To help with translations, first clone/fork the zec-qt-wallet repository . In the res/ folder, you will find a number of *.ts files which contain the translations. If you don t find your language listed, please copy the zec-qt-wallet_template.ts file and use that. You can open the *.ts file (which is an XML file) and enter the translated strings manually using your favorite text editor, and enter the translations in the translation XML tag. It might be more productive to use the Qt Linguist tool, which provides a nice UI that has additional context and easily manages the strings for translations. Installing and using Qt Linguist You can install the Qt open source distribution from here , and that comes with Qt Linguist. You can launch it by launching /path/to/Qt5/bin/linguist res/zec_qt_wallet_ language code .ts . Windows and Mac builds for standalone Qt Linguist are available here Submitting translations Once you have updated the translations in the *.ts file, please create a pull request for the file. Please remember to confirm the translations from the Linguist menu (or remove the unfinished tag from XML element, if you are editing manually). Note that you don t have to translate all the strings. You can do this incrementally, and zec-qt-wallet will use all available translated strings, else fall back to English. Testing translations If you want to test the translations locally, you ll have to compile zec-qt-wallet. Please see compiling from source instructions. Save the linguist file, and then, from a command prompt (remember to replace ln with your language code): # Compile the translations /path/to/qt5/bin/lrelease res/zec_qt_wallet_ ln .ts # Add to the Qt5 s base translations /path/to/qt5/bin/lconvert -o res/zec_ ln .qm res/zec_qt_wallet_ ln .qm /path/to/qt5/translations/qtbase_ ln .qm # Copy to the res folder mv res/zec_ ln .qm res/zec_qt_wallet_ ln .qm After this, you can launch your compiled zec-qt-wallet with a LANG environment variable to force zec-qt-wallet to use that language LANG=es ./zec-qt-wallet","title":"Translating zec-qt-wallet"},{"location":"translations/#translating-zec-qt-wallet","text":"To help with translations, first clone/fork the zec-qt-wallet repository . In the res/ folder, you will find a number of *.ts files which contain the translations. If you don t find your language listed, please copy the zec-qt-wallet_template.ts file and use that. You can open the *.ts file (which is an XML file) and enter the translated strings manually using your favorite text editor, and enter the translations in the translation XML tag. It might be more productive to use the Qt Linguist tool, which provides a nice UI that has additional context and easily manages the strings for translations.","title":"Translating zec-qt-wallet"},{"location":"translations/#installing-and-using-qt-linguist","text":"You can install the Qt open source distribution from here , and that comes with Qt Linguist. You can launch it by launching /path/to/Qt5/bin/linguist res/zec_qt_wallet_ language code .ts . Windows and Mac builds for standalone Qt Linguist are available here","title":"Installing and using Qt Linguist"},{"location":"translations/#submitting-translations","text":"Once you have updated the translations in the *.ts file, please create a pull request for the file. Please remember to confirm the translations from the Linguist menu (or remove the unfinished tag from XML element, if you are editing manually). Note that you don t have to translate all the strings. You can do this incrementally, and zec-qt-wallet will use all available translated strings, else fall back to English.","title":"Submitting translations"},{"location":"translations/#testing-translations","text":"If you want to test the translations locally, you ll have to compile zec-qt-wallet. Please see compiling from source instructions. Save the linguist file, and then, from a command prompt (remember to replace ln with your language code): # Compile the translations /path/to/qt5/bin/lrelease res/zec_qt_wallet_ ln .ts # Add to the Qt5 s base translations /path/to/qt5/bin/lconvert -o res/zec_ ln .qm res/zec_qt_wallet_ ln .qm /path/to/qt5/translations/qtbase_ ln .qm # Copy to the res folder mv res/zec_ ln .qm res/zec_qt_wallet_ ln .qm After this, you can launch your compiled zec-qt-wallet with a LANG environment variable to force zec-qt-wallet to use that language LANG=es ./zec-qt-wallet","title":"Testing translations"},{"location":"troubleshooting/","text":"Troubleshooting The zcashd debug log The debug.log file is the first place to start for troubleshooting issues. The file is located in the data directory and by default is located in the following locations: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\debug.log macOS: ~/Library/Application Support/Zcash/debug.log Linux: ~/.zcash/debug.log If you have specified a custom datadir option then the debug.log file will be located in that directory. Using a tool such as tail you can view the last 100 lines with the following command: tail -n 100 ~/.zcash/debug.log Common error messages Could not start embedded zcashd This means zec-qt-wallet couldn t start its embedded zcashd for some reason. zec-qt-wallet will show you another dialog box with the error reported from zcashd for debugging purposes as well. You might be able to solve this by simply restarting zec-qt-wallet, but if you repeatedly see this error, it might be one of the following reasons: If you compiled zec-qt-wallet yourself and are running it: zcashd doesn t come with the github repository, so you ll have to compile zcashd separately and copy if over into your zec-qt-wallet directory. You might have corrupt zcash params: In this case, you may try deleting your params and letting zec-qt-wallet download them again. If all else fails, you can run an external zcashd and zec-qt-wallet will connect to it. Authentication error Normally, zec-qt-wallet can pick up the rpcuser/rpcpassword from zcash.conf . If it doesn t for some reason, you can set the username/password in the File- Settings menu. If you are connecting to a remote node, make sure that zcashd on the remote machine is accepting connections from your machine. The target machine s firewall needs to allow connections from your host and also zcashd is set to be configured to accept connections from this host. // TODO see the warnings here and maybe rewrite this for best practises: rpcallowip https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html Not enough balance when sending transactions The most likely cause for this is that you are trying to spend unconfirmed funds. Unlike Bitcoin, the Zcash protocol doesn t let you spent unconfirmed funds yet. Please wait for at least one confirmation and then retry the transaction. My node isn t syncing If your node isn t syncing or is slow to sync, first check that you are running the latest version of zec-qt-wallet then check that you have connections to other nodes as you may have a network issue. zec-qt-wallet will display if you are connected via the application footer. You can also find this information in the zcashd tab on the main menu (if you are running the embedded zcashd ) and it will list the number of connections to other peers which should be greater than 0. If you do not have any connections then check your internet connection, then check that the ports required for zcashd are not blocked and that you have not specified a TOR connection in the options but do not have TOR running. If you are still having issues, then look in the debug log to identify any error messages. zcashd ports By default zcashd runs on the following ports. 8232 for mainnet RPC 8233 for mainnet peer-to-peer network 18232 for testnet RPC 18233 for testnet peer-to-peer network You may override any of these values in zcash.conf . My transaction didn t get mined If you send a transaction before the node is fully synced, or perhaps due to network congestion then the transaction may fail and be returned to your wallet due to the Transaction Expiry feature. When a user submits a transaction to the network, by default it will persist in the mempool for 20 blocks (currently approximately 50 minutes). If it has not been mined after that period, it is no longer valid and will be evicted from all mempools. The value will return to the sender\u2019s wallet. How to perform a wallet rescan // TODO How to do this when you don t have access to zcashd such as the bundled Mac app? Start zcashd with the --rescan option, e.g. to run zcashd in the background and perform a manual rescan: zcashd --daemon --rescan How to perform a reindex // TODO as above how to pass flags to zcashd on macOS? zcashd --daemon --reindex The displayed balance is incorrect If your balance is not being correctly displayed, first ensure that your software is up to date and that your node is fully synced. If your balance is still incorrect you can perform a manual wallet rescan which will rescan the blockchain for missing wallet transactions on startup. Depending on the number of (shielded) addresses in the wallet, this can be very slow so just leave it running until complete andd your balance should be reflected accurately. zcashd has no connections See the section on syncing issues for common resolutions to this issue. Some of my shielded transactions are not displayed in the transaction tab By default zcashd does not store outgoing shielded transactions. To overcome this zec-qt-wallet will store shielded sends locally and this option may be disabled and any transactions cleared. If you are missing any outgoing shielded transactions check that the option to Remember shielded transactions is selected in the wallet options . There is no way (currently) of recoving the information about outgoping fully shielded spends if this option is disabled. I can t generate a new Sprout address // TODO Status of Sprout addresses The use of Sapling addresses is discouraged and Sapling addresses should be used wherever possible. To speed up this process zec-qt-wallet disallows generating new Sprout addressess. If you have a need to do this you can do so simply by using the underlying zcashd instance via the following command and the new address will be displayed in zec-qt-wallet` as normal. zcash-cli getnewaddress sprout Sending from Sprout address to Sapling gives error You cannot send directly from a Sprout address (zc) to a Sapling address (zs) as it must pass through the turnstile. See the details on the turnstile migration for details on how to move your funds from a Sprout address to a Sapling one in a privacy-preserving way. My issue isn t resolved Open an issue on Github or tweet at @zecqtwallet for help.","title":"Troubleshooting Issues"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#the-zcashd-debug-log","text":"The debug.log file is the first place to start for troubleshooting issues. The file is located in the data directory and by default is located in the following locations: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\debug.log macOS: ~/Library/Application Support/Zcash/debug.log Linux: ~/.zcash/debug.log If you have specified a custom datadir option then the debug.log file will be located in that directory. Using a tool such as tail you can view the last 100 lines with the following command: tail -n 100 ~/.zcash/debug.log","title":"The zcashd debug log"},{"location":"troubleshooting/#common-error-messages","text":"","title":"Common error messages"},{"location":"troubleshooting/#could-not-start-embedded-zcashd","text":"This means zec-qt-wallet couldn t start its embedded zcashd for some reason. zec-qt-wallet will show you another dialog box with the error reported from zcashd for debugging purposes as well. You might be able to solve this by simply restarting zec-qt-wallet, but if you repeatedly see this error, it might be one of the following reasons: If you compiled zec-qt-wallet yourself and are running it: zcashd doesn t come with the github repository, so you ll have to compile zcashd separately and copy if over into your zec-qt-wallet directory. You might have corrupt zcash params: In this case, you may try deleting your params and letting zec-qt-wallet download them again. If all else fails, you can run an external zcashd and zec-qt-wallet will connect to it.","title":"Could not start embedded zcashd"},{"location":"troubleshooting/#authentication-error","text":"Normally, zec-qt-wallet can pick up the rpcuser/rpcpassword from zcash.conf . If it doesn t for some reason, you can set the username/password in the File- Settings menu. If you are connecting to a remote node, make sure that zcashd on the remote machine is accepting connections from your machine. The target machine s firewall needs to allow connections from your host and also zcashd is set to be configured to accept connections from this host. // TODO see the warnings here and maybe rewrite this for best practises: rpcallowip https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html","title":"Authentication error"},{"location":"troubleshooting/#not-enough-balance-when-sending-transactions","text":"The most likely cause for this is that you are trying to spend unconfirmed funds. Unlike Bitcoin, the Zcash protocol doesn t let you spent unconfirmed funds yet. Please wait for at least one confirmation and then retry the transaction.","title":"Not enough balance when sending transactions"},{"location":"troubleshooting/#my-node-isnt-syncing","text":"If your node isn t syncing or is slow to sync, first check that you are running the latest version of zec-qt-wallet then check that you have connections to other nodes as you may have a network issue. zec-qt-wallet will display if you are connected via the application footer. You can also find this information in the zcashd tab on the main menu (if you are running the embedded zcashd ) and it will list the number of connections to other peers which should be greater than 0. If you do not have any connections then check your internet connection, then check that the ports required for zcashd are not blocked and that you have not specified a TOR connection in the options but do not have TOR running. If you are still having issues, then look in the debug log to identify any error messages.","title":"My node isn't syncing"},{"location":"troubleshooting/#zcashd-ports","text":"By default zcashd runs on the following ports. 8232 for mainnet RPC 8233 for mainnet peer-to-peer network 18232 for testnet RPC 18233 for testnet peer-to-peer network You may override any of these values in zcash.conf .","title":"zcashd ports"},{"location":"troubleshooting/#my-transaction-didnt-get-mined","text":"If you send a transaction before the node is fully synced, or perhaps due to network congestion then the transaction may fail and be returned to your wallet due to the Transaction Expiry feature. When a user submits a transaction to the network, by default it will persist in the mempool for 20 blocks (currently approximately 50 minutes). If it has not been mined after that period, it is no longer valid and will be evicted from all mempools. The value will return to the sender\u2019s wallet.","title":"My transaction didn't get mined"},{"location":"troubleshooting/#how-to-perform-a-wallet-rescan","text":"// TODO How to do this when you don t have access to zcashd such as the bundled Mac app? Start zcashd with the --rescan option, e.g. to run zcashd in the background and perform a manual rescan: zcashd --daemon --rescan","title":"How to perform a wallet rescan"},{"location":"troubleshooting/#how-to-perform-a-reindex","text":"// TODO as above how to pass flags to zcashd on macOS? zcashd --daemon --reindex","title":"How to perform a reindex"},{"location":"troubleshooting/#the-displayed-balance-is-incorrect","text":"If your balance is not being correctly displayed, first ensure that your software is up to date and that your node is fully synced. If your balance is still incorrect you can perform a manual wallet rescan which will rescan the blockchain for missing wallet transactions on startup. Depending on the number of (shielded) addresses in the wallet, this can be very slow so just leave it running until complete andd your balance should be reflected accurately.","title":"The displayed balance is incorrect"},{"location":"troubleshooting/#zcashd-has-no-connections","text":"See the section on syncing issues for common resolutions to this issue.","title":"zcashd has no connections"},{"location":"troubleshooting/#some-of-my-shielded-transactions-are-not-displayed-in-the-transaction-tab","text":"By default zcashd does not store outgoing shielded transactions. To overcome this zec-qt-wallet will store shielded sends locally and this option may be disabled and any transactions cleared. If you are missing any outgoing shielded transactions check that the option to Remember shielded transactions is selected in the wallet options . There is no way (currently) of recoving the information about outgoping fully shielded spends if this option is disabled.","title":"Some of my shielded transactions are not displayed in the transaction tab"},{"location":"troubleshooting/#i-cant-generate-a-new-sprout-address","text":"// TODO Status of Sprout addresses The use of Sapling addresses is discouraged and Sapling addresses should be used wherever possible. To speed up this process zec-qt-wallet disallows generating new Sprout addressess. If you have a need to do this you can do so simply by using the underlying zcashd instance via the following command and the new address will be displayed in zec-qt-wallet` as normal. zcash-cli getnewaddress sprout","title":"I can't generate a new Sprout address"},{"location":"troubleshooting/#sending-from-sprout-address-to-sapling-gives-error","text":"You cannot send directly from a Sprout address (zc) to a Sapling address (zs) as it must pass through the turnstile. See the details on the turnstile migration for details on how to move your funds from a Sprout address to a Sapling one in a privacy-preserving way.","title":"Sending from Sprout address to Sapling gives error"},{"location":"troubleshooting/#my-issue-isnt-resolved","text":"Open an issue on Github or tweet at @zecqtwallet for help.","title":"My issue isn't resolved"},{"location":"turnstile-migration/","text":"Turnstile Migration This is not an official implementation of the turnstile zcashd has yet to implement support for the Sapling turnstile. There is an official proposal which has yet to be implemented into zcashd . You can follow progress of development here and the zec-qt-wallet is an individual implementation. If you are concerned then wait until the official RPC tool is released. Turnstile Migration overview The Sapling turnstile is an auditing mechanism for the number of ZEC in circulation. The Sapling turnstile provides accounting for the ZEC held in Sprout shielded addresses as they are migrated to Sapling shielded addresses. To achieve this, owners of shielded ZEC are required to send their balances to a transparent address before sending to Sapling shielded addresses. If you simply send the funds from a Sprout address to a transparent address to a Sapling address it would be relitavely trivial to link the balances. The [zcash docs] detail the best practises for handling this turnstile migration. zec-qt-wallet includes a tool to make this simple to migrate your shielded coins from the Sprout to Sapling sheilded pool. It is recommended that all users perform this migration. zec-qt-wallet can migrate your Sprout funds to a Sapling address in a privacy preserving manner folling the [privacy recommendations] by: Creating new transparent addresses in your wallet to move from Sprout to the transparent addressess Splits the funds across multiple transaparent addresses over multiple blocks Uses rouund numbers to obscure any identifying information as these round number values e.g. 10 will be very common in the blockchain Using the turnstile tool You do not need to keep the wallet open during the migration If you shut down the wallet then it ll send on reopening. You will need the wallet to be open in order for any transactions to be sent. Steps You may only perform one migration at a time using the app.","title":"Turnstile Migration"},{"location":"turnstile-migration/#turnstile-migration","text":"This is not an official implementation of the turnstile zcashd has yet to implement support for the Sapling turnstile. There is an official proposal which has yet to be implemented into zcashd . You can follow progress of development here and the zec-qt-wallet is an individual implementation. If you are concerned then wait until the official RPC tool is released.","title":"Turnstile Migration"},{"location":"turnstile-migration/#turnstile-migration-overview","text":"The Sapling turnstile is an auditing mechanism for the number of ZEC in circulation. The Sapling turnstile provides accounting for the ZEC held in Sprout shielded addresses as they are migrated to Sapling shielded addresses. To achieve this, owners of shielded ZEC are required to send their balances to a transparent address before sending to Sapling shielded addresses. If you simply send the funds from a Sprout address to a transparent address to a Sapling address it would be relitavely trivial to link the balances. The [zcash docs] detail the best practises for handling this turnstile migration. zec-qt-wallet includes a tool to make this simple to migrate your shielded coins from the Sprout to Sapling sheilded pool. It is recommended that all users perform this migration. zec-qt-wallet can migrate your Sprout funds to a Sapling address in a privacy preserving manner folling the [privacy recommendations] by: Creating new transparent addresses in your wallet to move from Sprout to the transparent addressess Splits the funds across multiple transaparent addresses over multiple blocks Uses rouund numbers to obscure any identifying information as these round number values e.g. 10 will be very common in the blockchain","title":"Turnstile Migration overview"},{"location":"turnstile-migration/#using-the-turnstile-tool","text":"You do not need to keep the wallet open during the migration If you shut down the wallet then it ll send on reopening. You will need the wallet to be open in order for any transactions to be sent. Steps You may only perform one migration at a time using the app.","title":"Using the turnstile tool"},{"location":"using-zec-qt-wallet/","text":"Using zec-qt-wallet Getting started Initial Parameters Download The first time zec-qt-wallet starts it will create a zcash.conf file with default configuration values as well as downloading the parameters required for sending and validating transactions. These parameters are currently around 1.7GB in size and only need to be downloaded once. Now that you have zec-qt-wallet installed it is time to start using the software. If you are using the embedded zcashd and it is your first time using the software, the system parameters will be downloaded from the internet (~1.7GB) and a zcash.conf file created specifying some default configuration values. The blockchain will then begin to sync, which is a time consuming process taking anywhere of the order of 8 hours to days depending on your hardware and network performance. You can monitor the progress in the bottom right corner wof zec-qt-wallet which displays the number of blocks downloaded and a sync percentage. Initial Sync The blockchain is around 21GB in size and will take around 8+ hours to download. Monitor the progress via the sync progress in the bottom right corner of zec-qt-wallet. Generating a new address Visting the Receive tab of zec-qt-wallet will show all current addresses and enable you to generate new ones. To learn about the different types of addresses available which are transparent, shielded (Sprout and Sapling) please visit this page . It is not possible to remove an address from the wallet once it has been generated. Backup after generating a new address Whenever a new address is generated you should ensure that you have a backup of the address. Only Sapling uses a HD wallet and can be recreated from a seed whereas transaparent or Sprout addresses either require the private key or a wallet.dat backup made after the address was created. See the Backup section for more details. Transparent addresses are automatically created when clicking the t-Addr button as transparent addressess should not be reused. Unlike transparent addresses it is fine to reuse shielded addresses and so new addresses can be manually created via the New Address button. Optionally add a label to easily identify the address and add it to your address book. A QR code is also provided for the address which may be used to receive funds. zec-qt-wallet will also show if the address has been previously used. Sending a transaction Once you ve generated an address and have sent some funds to it, you can send some ZEC. Click on the Send tab: You can only send funds with at least one confirmation. While transactions are being confirmed they are easily identificable as they are highlighted in red. Choose an address with funds in it and enter the receipient address. You may specifify multiple recipients per transaction and there may be a mixture of transparent and shielded recipients. The Memo field is only available when sending to a shielded address (either Sprout or Sapling). The default mining fee is 0.0001 ZEC which is recommended for all transactions. See the Options section if you wish to customise this behviour and understand the implications. Shielded send requirements Sending Sapling transaction requires only around 40Mb of memory and happen in a few seconds. If you still have funds in legacy Sprout addresses sending times are typically around 30 seconds and require 1.3GB of memory. Viewing transaction on explorer Once complete, the txid will be displayed. Right click to bring up a menu to view on the block explorer. Alternitavely for any transactions on the Transactions tab right click and choose View on block explorer . This will open up the default block explorer of xxxx. If your transaction is a shielded one there will not be any public information available except the mining fee (as in the example transaction above). Once the funds are confirming any values will be highlighted in red until they receive one confirmation and will not be spendable until they have had one confirmation. Pay Zcash URI Now pay zcash URIs by selecting File - Pay Zcash URI and pasting the payment URI. Zcash payment URIs encode the address, amount and memo into a single convenient string, so you can copy-paste it into zec-qt-wallet and make payments easily. Address book The address book makes managing addresses and labels simple. Either select Address Book in the application menu or select the button on the Send tab. You can import an address book in csv format? Backing up zec-qt-wallet provides multiple options to ensure your wallet and keys are backed up. It is important that you perform regular backups if you are not exclusively using Sapling addressess. Only Sapling has a HD wallet and once you have the HD seed addressess can be recreated from it.\\ It is not yet possible to import a Sapling HD seed While Sapling provides a HD wallet the feature to import the seed does not yet exist, so while your funds would not be lost in the situation where you have the seed they would be rendered unusable until this feature is added. Therefore it is recommended you keep regular backups of either private keys or the wallet.dat file until this feature is implemented. Export a single private key To export a single private key on the Balance tab right click on the address and choose Get private key from the context menu. Alternitavely on the Receive tab choose the address in question and click the Export Private Key . The output of both is the private key which you can copy to a secure storage medium or be used to import into other applications. Export all private keys You can export all private keys for addresses in your wallet by choosing the Export all private keys from the File menu. This will provide a list of all private keys. Note that by default when zcashd starts it creates 100 transparent addresses for the keypool for use as change addresses hence this list will always contain at least 100 transparent address keys not all of which have been used. Backing up wallet.dat You can backup all of your private keys by making a copy of the wallet.dat file. To recover you then replace any existing wallet.dat file in the data directory . Create a new backup after each address As new addresses are generated you will need to create an updated backup else the new keys will not be included. While this is a convinient method of backing up it means that you are restricted to importing to compatible software with zcashd and also if you have many addresses that are unused it will slow the initial import over say importing your addresses with funds. Importing private keys To import a private key, simply choose the Import private key from the File main menu. You may paste in multiple keys, one per line that will be imported into the wallet. Note that depending on the number of keys to import and if they are shielded addresses it may take some time for the import to be completed. zeq-qt-wallet options zec-qt wallet has a number of options that allow you to customise how the software works and may be accessed in the Settings- Options menu as shown below. Remember shielded transactions By default zcashd will not store information about your outgoing fully shielded transactions. By default zec-qt-wallet will store outgoing transactions in an local database so that any shielded spends will appear on the transactions tab. If you do not wish these transactions to be stored by zec-qt-wallet simply toggle the option for Remember shielded transactions . At any point you may clear your shielded transaction history locally (there is no way of recovering this data). Allow custom fees Choose this option to allow the ability to change the default 0.0001 ZEC transaction fee. As all fees are transparent it is highly recommended that you use the default fee for all transactions to make your transactions indistinguishable. Shield change automatically to Sapling address Like Bitcoin when using transparent addresses change from a transaction goes to a new transparent address. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the app Options . As for transparent addresses this was a measure to preserve privacy and prevent trivial linking of transactions on the blockchain shielded (z) addresses do not have this property and any change is returned to the sending address. Connect via TOR When using Zcash it does nothing to preserve your network level privacy so a unique IP address can allow network observers to correlate your Zcash transactions with each other abd with your other traffic. To overcome this you may use TOR to obsfucate your IP address. https://z.cash/support/security/privacy-security-recommendations Onion Nodes // TODO list of onion nodes Encrypted Memo field //TODO https://z.cash/blog/encrypted-memo-field/ Including a reply address //TODO Replying to a memo If you receive a transaction with a memo that contains a reply-to address, you can now reply to it right from the transactions table. Just right click - Reply To to compose a reply! Exporting transactions zec-qt-wallet allows you to export all transactions via the File- Export Transactions menu item. You will be prompted where to store the exported file and it will be saved as a csv file with the following headers: Type Address Date/Time Amount Memo Apps zec-qt-wallet bundles some aplications to make common tasks simpler. Using z-board.net //TODO z-board.net is z-board.net now comes with support for topics, in addition to posting to the main boardzboard http://z-board.net/ Turnstile migration See the page on the turnstile migration for full details. Customising zcash.conf The zcash.conf file may be used to customise how the zcashd software behaves. There are a number of config options available . when zec-qt-wallet is installed it creates this file with sensible defaults such as connecting to the mainnet and a random password. The location of zcash.conf varies by system. By default it is located in the following location on each platform: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf macOS: ~/Library/Application Support/Zcash/zcash.conf Linux: ~/.zcash/zcash.conf Connecting to an external zcashd Exposing Using the RPC port over a remote interface is NOT RECOMMENDED, because that will cause the rpcpassword to be transmitted over the network unencrypted, allowing any observer to steal your keys + Zcash and take over the OS account running zcashd. If you want to connect to a remote zcashd, follow the following steps: start zec-qt-wallet with -no-embedded to prevent the embedded zcashd from starting Go to Edit- Settings and set the remote node s host/post and rpc username/password Make sure the zcashd on remote node is listening on all interfaces, and not just the localhost interface Note that the easiest way to connect to a remote node is probably to ssh to it with port forwarding (ssh -L8232:127.0.0.1:8232 user@remotehost) and set zec-qt-wallet to connect to localhost:8232 By default, only RPC connections from localhost are allowed.","title":"Using zec-qt-wallet"},{"location":"using-zec-qt-wallet/#using-zec-qt-wallet","text":"","title":"Using zec-qt-wallet"},{"location":"using-zec-qt-wallet/#getting-started","text":"Initial Parameters Download The first time zec-qt-wallet starts it will create a zcash.conf file with default configuration values as well as downloading the parameters required for sending and validating transactions. These parameters are currently around 1.7GB in size and only need to be downloaded once. Now that you have zec-qt-wallet installed it is time to start using the software. If you are using the embedded zcashd and it is your first time using the software, the system parameters will be downloaded from the internet (~1.7GB) and a zcash.conf file created specifying some default configuration values. The blockchain will then begin to sync, which is a time consuming process taking anywhere of the order of 8 hours to days depending on your hardware and network performance. You can monitor the progress in the bottom right corner wof zec-qt-wallet which displays the number of blocks downloaded and a sync percentage. Initial Sync The blockchain is around 21GB in size and will take around 8+ hours to download. Monitor the progress via the sync progress in the bottom right corner of zec-qt-wallet.","title":"Getting started"},{"location":"using-zec-qt-wallet/#generating-a-new-address","text":"Visting the Receive tab of zec-qt-wallet will show all current addresses and enable you to generate new ones. To learn about the different types of addresses available which are transparent, shielded (Sprout and Sapling) please visit this page . It is not possible to remove an address from the wallet once it has been generated. Backup after generating a new address Whenever a new address is generated you should ensure that you have a backup of the address. Only Sapling uses a HD wallet and can be recreated from a seed whereas transaparent or Sprout addresses either require the private key or a wallet.dat backup made after the address was created. See the Backup section for more details. Transparent addresses are automatically created when clicking the t-Addr button as transparent addressess should not be reused. Unlike transparent addresses it is fine to reuse shielded addresses and so new addresses can be manually created via the New Address button. Optionally add a label to easily identify the address and add it to your address book. A QR code is also provided for the address which may be used to receive funds. zec-qt-wallet will also show if the address has been previously used.","title":"Generating a new address"},{"location":"using-zec-qt-wallet/#sending-a-transaction","text":"Once you ve generated an address and have sent some funds to it, you can send some ZEC. Click on the Send tab: You can only send funds with at least one confirmation. While transactions are being confirmed they are easily identificable as they are highlighted in red. Choose an address with funds in it and enter the receipient address. You may specifify multiple recipients per transaction and there may be a mixture of transparent and shielded recipients. The Memo field is only available when sending to a shielded address (either Sprout or Sapling). The default mining fee is 0.0001 ZEC which is recommended for all transactions. See the Options section if you wish to customise this behviour and understand the implications. Shielded send requirements Sending Sapling transaction requires only around 40Mb of memory and happen in a few seconds. If you still have funds in legacy Sprout addresses sending times are typically around 30 seconds and require 1.3GB of memory.","title":"Sending a transaction"},{"location":"using-zec-qt-wallet/#viewing-transaction-on-explorer","text":"Once complete, the txid will be displayed. Right click to bring up a menu to view on the block explorer. Alternitavely for any transactions on the Transactions tab right click and choose View on block explorer . This will open up the default block explorer of xxxx. If your transaction is a shielded one there will not be any public information available except the mining fee (as in the example transaction above). Once the funds are confirming any values will be highlighted in red until they receive one confirmation and will not be spendable until they have had one confirmation.","title":"Viewing transaction on explorer"},{"location":"using-zec-qt-wallet/#pay-zcash-uri","text":"Now pay zcash URIs by selecting File - Pay Zcash URI and pasting the payment URI. Zcash payment URIs encode the address, amount and memo into a single convenient string, so you can copy-paste it into zec-qt-wallet and make payments easily.","title":"Pay Zcash URI"},{"location":"using-zec-qt-wallet/#address-book","text":"The address book makes managing addresses and labels simple. Either select Address Book in the application menu or select the button on the Send tab. You can import an address book in csv format?","title":"Address book"},{"location":"using-zec-qt-wallet/#backing-up","text":"zec-qt-wallet provides multiple options to ensure your wallet and keys are backed up. It is important that you perform regular backups if you are not exclusively using Sapling addressess. Only Sapling has a HD wallet and once you have the HD seed addressess can be recreated from it.\\ It is not yet possible to import a Sapling HD seed While Sapling provides a HD wallet the feature to import the seed does not yet exist, so while your funds would not be lost in the situation where you have the seed they would be rendered unusable until this feature is added. Therefore it is recommended you keep regular backups of either private keys or the wallet.dat file until this feature is implemented.","title":"Backing up"},{"location":"using-zec-qt-wallet/#export-a-single-private-key","text":"To export a single private key on the Balance tab right click on the address and choose Get private key from the context menu. Alternitavely on the Receive tab choose the address in question and click the Export Private Key . The output of both is the private key which you can copy to a secure storage medium or be used to import into other applications.","title":"Export a single private key"},{"location":"using-zec-qt-wallet/#export-all-private-keys","text":"You can export all private keys for addresses in your wallet by choosing the Export all private keys from the File menu. This will provide a list of all private keys. Note that by default when zcashd starts it creates 100 transparent addresses for the keypool for use as change addresses hence this list will always contain at least 100 transparent address keys not all of which have been used.","title":"Export all private keys"},{"location":"using-zec-qt-wallet/#backing-up-walletdat","text":"You can backup all of your private keys by making a copy of the wallet.dat file. To recover you then replace any existing wallet.dat file in the data directory . Create a new backup after each address As new addresses are generated you will need to create an updated backup else the new keys will not be included. While this is a convinient method of backing up it means that you are restricted to importing to compatible software with zcashd and also if you have many addresses that are unused it will slow the initial import over say importing your addresses with funds.","title":"Backing up wallet.dat"},{"location":"using-zec-qt-wallet/#importing-private-keys","text":"To import a private key, simply choose the Import private key from the File main menu. You may paste in multiple keys, one per line that will be imported into the wallet. Note that depending on the number of keys to import and if they are shielded addresses it may take some time for the import to be completed.","title":"Importing private keys"},{"location":"using-zec-qt-wallet/#zeq-qt-wallet-options","text":"zec-qt wallet has a number of options that allow you to customise how the software works and may be accessed in the Settings- Options menu as shown below.","title":"zeq-qt-wallet options"},{"location":"using-zec-qt-wallet/#remember-shielded-transactions","text":"By default zcashd will not store information about your outgoing fully shielded transactions. By default zec-qt-wallet will store outgoing transactions in an local database so that any shielded spends will appear on the transactions tab. If you do not wish these transactions to be stored by zec-qt-wallet simply toggle the option for Remember shielded transactions . At any point you may clear your shielded transaction history locally (there is no way of recovering this data).","title":"Remember shielded transactions"},{"location":"using-zec-qt-wallet/#allow-custom-fees","text":"Choose this option to allow the ability to change the default 0.0001 ZEC transaction fee. As all fees are transparent it is highly recommended that you use the default fee for all transactions to make your transactions indistinguishable.","title":"Allow custom fees"},{"location":"using-zec-qt-wallet/#shield-change-automatically-to-sapling-address","text":"Like Bitcoin when using transparent addresses change from a transaction goes to a new transparent address. zec-qt-wallet allows you to set an option to automatically send this change to a Sapling address via the app Options . As for transparent addresses this was a measure to preserve privacy and prevent trivial linking of transactions on the blockchain shielded (z) addresses do not have this property and any change is returned to the sending address.","title":"Shield change automatically to Sapling address"},{"location":"using-zec-qt-wallet/#connect-via-tor","text":"When using Zcash it does nothing to preserve your network level privacy so a unique IP address can allow network observers to correlate your Zcash transactions with each other abd with your other traffic. To overcome this you may use TOR to obsfucate your IP address. https://z.cash/support/security/privacy-security-recommendations","title":"Connect via TOR"},{"location":"using-zec-qt-wallet/#onion-nodes","text":"// TODO list of onion nodes","title":"Onion Nodes"},{"location":"using-zec-qt-wallet/#encrypted-memo-field","text":"//TODO https://z.cash/blog/encrypted-memo-field/","title":"Encrypted Memo field"},{"location":"using-zec-qt-wallet/#including-a-reply-address","text":"//TODO","title":"Including a reply address"},{"location":"using-zec-qt-wallet/#replying-to-a-memo","text":"If you receive a transaction with a memo that contains a reply-to address, you can now reply to it right from the transactions table. Just right click - Reply To to compose a reply!","title":"Replying to a memo"},{"location":"using-zec-qt-wallet/#exporting-transactions","text":"zec-qt-wallet allows you to export all transactions via the File- Export Transactions menu item. You will be prompted where to store the exported file and it will be saved as a csv file with the following headers: Type Address Date/Time Amount Memo","title":"Exporting transactions"},{"location":"using-zec-qt-wallet/#apps","text":"zec-qt-wallet bundles some aplications to make common tasks simpler.","title":"Apps"},{"location":"using-zec-qt-wallet/#using-z-boardnet","text":"//TODO z-board.net is z-board.net now comes with support for topics, in addition to posting to the main boardzboard http://z-board.net/","title":"Using z-board.net"},{"location":"using-zec-qt-wallet/#turnstile-migration","text":"See the page on the turnstile migration for full details.","title":"Turnstile migration"},{"location":"using-zec-qt-wallet/#customising-zcashconf","text":"The zcash.conf file may be used to customise how the zcashd software behaves. There are a number of config options available . when zec-qt-wallet is installed it creates this file with sensible defaults such as connecting to the mainnet and a random password. The location of zcash.conf varies by system. By default it is located in the following location on each platform: Windows: %HOMEPATH%\\AppData\\Roaming\\Zcash\\zcash.conf macOS: ~/Library/Application Support/Zcash/zcash.conf Linux: ~/.zcash/zcash.conf","title":"Customising zcash.conf"},{"location":"using-zec-qt-wallet/#connecting-to-an-external-zcashd","text":"Exposing Using the RPC port over a remote interface is NOT RECOMMENDED, because that will cause the rpcpassword to be transmitted over the network unencrypted, allowing any observer to steal your keys + Zcash and take over the OS account running zcashd. If you want to connect to a remote zcashd, follow the following steps: start zec-qt-wallet with -no-embedded to prevent the embedded zcashd from starting Go to Edit- Settings and set the remote node s host/post and rpc username/password Make sure the zcashd on remote node is listening on all interfaces, and not just the localhost interface Note that the easiest way to connect to a remote node is probably to ssh to it with port forwarding (ssh -L8232:127.0.0.1:8232 user@remotehost) and set zec-qt-wallet to connect to localhost:8232 By default, only RPC connections from localhost are allowed.","title":"Connecting to an external zcashd"}]}